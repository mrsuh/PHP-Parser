<?php declare(strict_types=1);

namespace PhpParser\Parser;

use PhpParser\Error;
use PhpParser\Modifiers;
use PhpParser\Node;
use PhpParser\Node\Expr;
use PhpParser\Node\Name;
use PhpParser\Node\Scalar;
use PhpParser\Node\Stmt;

/* This is an automatically GENERATED file, which should not be manually edited.
 * Instead edit one of the following:
 *  * the grammar file grammar/php.y
 *  * the skeleton file grammar/parser.template
 *  * the preprocessing script grammar/rebuildParsers.php
 */
class Php7 extends \PhpParser\ParserAbstract
{
    public const YYERRTOK = 256;
    public const T_VOID_CAST = 257;
    public const T_THROW = 258;
    public const T_INCLUDE = 259;
    public const T_INCLUDE_ONCE = 260;
    public const T_EVAL = 261;
    public const T_REQUIRE = 262;
    public const T_REQUIRE_ONCE = 263;
    public const T_LOGICAL_OR = 264;
    public const T_LOGICAL_XOR = 265;
    public const T_LOGICAL_AND = 266;
    public const T_PRINT = 267;
    public const T_YIELD = 268;
    public const T_DOUBLE_ARROW = 269;
    public const T_YIELD_FROM = 270;
    public const T_PLUS_EQUAL = 271;
    public const T_MINUS_EQUAL = 272;
    public const T_MUL_EQUAL = 273;
    public const T_DIV_EQUAL = 274;
    public const T_CONCAT_EQUAL = 275;
    public const T_MOD_EQUAL = 276;
    public const T_AND_EQUAL = 277;
    public const T_OR_EQUAL = 278;
    public const T_XOR_EQUAL = 279;
    public const T_SL_EQUAL = 280;
    public const T_SR_EQUAL = 281;
    public const T_POW_EQUAL = 282;
    public const T_COALESCE_EQUAL = 283;
    public const T_COALESCE = 284;
    public const T_BOOLEAN_OR = 285;
    public const T_BOOLEAN_AND = 286;
    public const T_AMPERSAND_NOT_FOLLOWED_BY_VAR_OR_VARARG = 287;
    public const T_AMPERSAND_FOLLOWED_BY_VAR_OR_VARARG = 288;
    public const T_IS_EQUAL = 289;
    public const T_IS_NOT_EQUAL = 290;
    public const T_IS_IDENTICAL = 291;
    public const T_IS_NOT_IDENTICAL = 292;
    public const T_SPACESHIP = 293;
    public const T_IS_SMALLER_OR_EQUAL = 294;
    public const T_IS_GREATER_OR_EQUAL = 295;
    public const T_SL = 296;
    public const T_SR = 297;
    public const T_INSTANCEOF = 298;
    public const T_INC = 299;
    public const T_DEC = 300;
    public const T_INT_CAST = 301;
    public const T_DOUBLE_CAST = 302;
    public const T_STRING_CAST = 303;
    public const T_ARRAY_CAST = 304;
    public const T_OBJECT_CAST = 305;
    public const T_BOOL_CAST = 306;
    public const T_UNSET_CAST = 307;
    public const T_POW = 308;
    public const T_NEW = 309;
    public const T_CLONE = 310;
    public const T_EXIT = 311;
    public const T_IF = 312;
    public const T_ELSEIF = 313;
    public const T_ELSE = 314;
    public const T_ENDIF = 315;
    public const T_LNUMBER = 316;
    public const T_DNUMBER = 317;
    public const T_STRING = 318;
    public const T_STRING_VARNAME = 319;
    public const T_VARIABLE = 320;
    public const T_NUM_STRING = 321;
    public const T_INLINE_HTML = 322;
    public const T_ENCAPSED_AND_WHITESPACE = 323;
    public const T_CONSTANT_ENCAPSED_STRING = 324;
    public const T_ECHO = 325;
    public const T_DO = 326;
    public const T_WHILE = 327;
    public const T_ENDWHILE = 328;
    public const T_FOR = 329;
    public const T_ENDFOR = 330;
    public const T_FOREACH = 331;
    public const T_ENDFOREACH = 332;
    public const T_DECLARE = 333;
    public const T_ENDDECLARE = 334;
    public const T_AS = 335;
    public const T_SWITCH = 336;
    public const T_MATCH = 337;
    public const T_ENDSWITCH = 338;
    public const T_CASE = 339;
    public const T_DEFAULT = 340;
    public const T_BREAK = 341;
    public const T_CONTINUE = 342;
    public const T_GOTO = 343;
    public const T_FUNCTION = 344;
    public const T_FN = 345;
    public const T_CONST = 346;
    public const T_RETURN = 347;
    public const T_TRY = 348;
    public const T_CATCH = 349;
    public const T_FINALLY = 350;
    public const T_USE = 351;
    public const T_INSTEADOF = 352;
    public const T_GLOBAL = 353;
    public const T_STATIC = 354;
    public const T_ABSTRACT = 355;
    public const T_FINAL = 356;
    public const T_PRIVATE = 357;
    public const T_PROTECTED = 358;
    public const T_PUBLIC = 359;
    public const T_READONLY = 360;
    public const T_PUBLIC_SET = 361;
    public const T_PROTECTED_SET = 362;
    public const T_PRIVATE_SET = 363;
    public const T_VAR = 364;
    public const T_UNSET = 365;
    public const T_ISSET = 366;
    public const T_EMPTY = 367;
    public const T_HALT_COMPILER = 368;
    public const T_CLASS = 369;
    public const T_TRAIT = 370;
    public const T_INTERFACE = 371;
    public const T_ENUM = 372;
    public const T_EXTENDS = 373;
    public const T_IMPLEMENTS = 374;
    public const T_OBJECT_OPERATOR = 375;
    public const T_NULLSAFE_OBJECT_OPERATOR = 376;
    public const T_LIST = 377;
    public const T_ARRAY = 378;
    public const T_CALLABLE = 379;
    public const T_CLASS_C = 380;
    public const T_TRAIT_C = 381;
    public const T_METHOD_C = 382;
    public const T_FUNC_C = 383;
    public const T_PROPERTY_C = 384;
    public const T_LINE = 385;
    public const T_FILE = 386;
    public const T_START_HEREDOC = 387;
    public const T_END_HEREDOC = 388;
    public const T_DOLLAR_OPEN_CURLY_BRACES = 389;
    public const T_CURLY_OPEN = 390;
    public const T_PAAMAYIM_NEKUDOTAYIM = 391;
    public const T_NAMESPACE = 392;
    public const T_NS_C = 393;
    public const T_DIR = 394;
    public const T_NS_SEPARATOR = 395;
    public const T_ELLIPSIS = 396;
    public const T_NAME_FULLY_QUALIFIED = 397;
    public const T_NAME_QUALIFIED = 398;
    public const T_NAME_RELATIVE = 399;
    public const T_ATTRIBUTE = 400;

    protected int $tokenToSymbolMapSize = 401;
    protected int $actionTableSize = 1578;
    protected int $gotoTableSize = 632;

    protected int $invalidSymbol = 173;
    protected int $errorSymbol = 1;
    protected int $defaultAction = -32766;
    protected int $unexpectedTokenRule = 32767;

    protected int $YY2TBLSTATE = 459;
    protected int $numNonLeafStates = 769;

    protected array $symbolToName = array(
        "EOF",
        "error",
        "T_VOID_CAST",
        "T_THROW",
        "T_INCLUDE",
        "T_INCLUDE_ONCE",
        "T_EVAL",
        "T_REQUIRE",
        "T_REQUIRE_ONCE",
        "','",
        "T_LOGICAL_OR",
        "T_LOGICAL_XOR",
        "T_LOGICAL_AND",
        "T_PRINT",
        "T_YIELD",
        "T_DOUBLE_ARROW",
        "T_YIELD_FROM",
        "'='",
        "T_PLUS_EQUAL",
        "T_MINUS_EQUAL",
        "T_MUL_EQUAL",
        "T_DIV_EQUAL",
        "T_CONCAT_EQUAL",
        "T_MOD_EQUAL",
        "T_AND_EQUAL",
        "T_OR_EQUAL",
        "T_XOR_EQUAL",
        "T_SL_EQUAL",
        "T_SR_EQUAL",
        "T_POW_EQUAL",
        "T_COALESCE_EQUAL",
        "'?'",
        "':'",
        "T_COALESCE",
        "T_BOOLEAN_OR",
        "T_BOOLEAN_AND",
        "'|'",
        "'^'",
        "T_AMPERSAND_NOT_FOLLOWED_BY_VAR_OR_VARARG",
        "T_AMPERSAND_FOLLOWED_BY_VAR_OR_VARARG",
        "T_IS_EQUAL",
        "T_IS_NOT_EQUAL",
        "T_IS_IDENTICAL",
        "T_IS_NOT_IDENTICAL",
        "T_SPACESHIP",
        "'<'",
        "T_IS_SMALLER_OR_EQUAL",
        "'>'",
        "T_IS_GREATER_OR_EQUAL",
        "T_SL",
        "T_SR",
        "'+'",
        "'-'",
        "'.'",
        "'*'",
        "'/'",
        "'%'",
        "'!'",
        "T_INSTANCEOF",
        "'~'",
        "T_INC",
        "T_DEC",
        "T_INT_CAST",
        "T_DOUBLE_CAST",
        "T_STRING_CAST",
        "T_ARRAY_CAST",
        "T_OBJECT_CAST",
        "T_BOOL_CAST",
        "T_UNSET_CAST",
        "'@'",
        "T_POW",
        "'['",
        "T_NEW",
        "T_CLONE",
        "T_EXIT",
        "T_IF",
        "T_ELSEIF",
        "T_ELSE",
        "T_ENDIF",
        "T_LNUMBER",
        "T_DNUMBER",
        "T_STRING",
        "T_STRING_VARNAME",
        "T_VARIABLE",
        "T_NUM_STRING",
        "T_INLINE_HTML",
        "T_ENCAPSED_AND_WHITESPACE",
        "T_CONSTANT_ENCAPSED_STRING",
        "T_ECHO",
        "T_DO",
        "T_WHILE",
        "T_ENDWHILE",
        "T_FOR",
        "T_ENDFOR",
        "T_FOREACH",
        "T_ENDFOREACH",
        "T_DECLARE",
        "T_ENDDECLARE",
        "T_AS",
        "T_SWITCH",
        "T_MATCH",
        "T_ENDSWITCH",
        "T_CASE",
        "T_DEFAULT",
        "T_BREAK",
        "T_CONTINUE",
        "T_GOTO",
        "T_FUNCTION",
        "T_FN",
        "T_CONST",
        "T_RETURN",
        "T_TRY",
        "T_CATCH",
        "T_FINALLY",
        "T_USE",
        "T_INSTEADOF",
        "T_GLOBAL",
        "T_STATIC",
        "T_ABSTRACT",
        "T_FINAL",
        "T_PRIVATE",
        "T_PROTECTED",
        "T_PUBLIC",
        "T_READONLY",
        "T_PUBLIC_SET",
        "T_PROTECTED_SET",
        "T_PRIVATE_SET",
        "T_VAR",
        "T_UNSET",
        "T_ISSET",
        "T_EMPTY",
        "T_HALT_COMPILER",
        "T_CLASS",
        "T_TRAIT",
        "T_INTERFACE",
        "T_ENUM",
        "T_EXTENDS",
        "T_IMPLEMENTS",
        "T_OBJECT_OPERATOR",
        "T_NULLSAFE_OBJECT_OPERATOR",
        "T_LIST",
        "T_ARRAY",
        "T_CALLABLE",
        "T_CLASS_C",
        "T_TRAIT_C",
        "T_METHOD_C",
        "T_FUNC_C",
        "T_PROPERTY_C",
        "T_LINE",
        "T_FILE",
        "T_START_HEREDOC",
        "T_END_HEREDOC",
        "T_DOLLAR_OPEN_CURLY_BRACES",
        "T_CURLY_OPEN",
        "T_PAAMAYIM_NEKUDOTAYIM",
        "T_NAMESPACE",
        "T_NS_C",
        "T_DIR",
        "T_NS_SEPARATOR",
        "T_ELLIPSIS",
        "T_NAME_FULLY_QUALIFIED",
        "T_NAME_QUALIFIED",
        "T_NAME_RELATIVE",
        "T_ATTRIBUTE",
        "';'",
        "']'",
        "'('",
        "')'",
        "'{'",
        "'}'",
        "'`'",
        "'\"'",
        "'$'"
    );

    protected array $tokenToSymbol = array(
            0,  173,  173,  173,  173,  173,  173,  173,  173,  173,
          173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
          173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
          173,  173,  173,   57,  171,  173,  172,   56,  173,  173,
          166,  167,   54,   51,    9,   52,   53,   55,  173,  173,
          173,  173,  173,  173,  173,  173,  173,  173,   32,  164,
           45,   17,   47,   31,   69,  173,  173,  173,  173,  173,
          173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
          173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
          173,   71,  173,  165,   37,  173,  170,  173,  173,  173,
          173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
          173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
          173,  173,  173,  168,   36,  169,   59,  173,  173,  173,
          173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
          173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
          173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
          173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
          173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
          173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
          173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
          173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
          173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
          173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
          173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
          173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
          173,  173,  173,  173,  173,  173,    1,    2,    3,    4,
            5,    6,    7,    8,   10,   11,   12,   13,   14,   15,
           16,   18,   19,   20,   21,   22,   23,   24,   25,   26,
           27,   28,   29,   30,   33,   34,   35,   38,   39,   40,
           41,   42,   43,   44,   46,   48,   49,   50,   58,   60,
           61,   62,   63,   64,   65,   66,   67,   68,   70,   72,
           73,   74,   75,   76,   77,   78,   79,   80,   81,   82,
           83,   84,   85,   86,   87,   88,   89,   90,   91,   92,
           93,   94,   95,   96,   97,   98,   99,  100,  101,  102,
          103,  104,  105,  106,  107,  108,  109,  110,  111,  112,
          113,  114,  115,  116,  117,  118,  119,  120,  121,  122,
          123,  124,  125,  126,  127,  128,  129,  130,  131,  132,
          133,  134,  135,  136,  137,  138,  139,  140,  141,  142,
          143,  144,  145,  146,  147,  148,  149,  150,  151,  152,
          153,  154,  155,  156,  157,  158,  159,  160,  161,  162,
          163
    );

    protected array $action = array(
          133,  134,  135,  589,  136,  137, 1402,  781,  782,  783,
          138,   41,  865, -353, 1401, 1417,-32766,-32766,-32766,  982,
          856, 1172, 1173, 1174, 1168, 1167, 1166, 1175, 1169, 1170,
         1171,-32766,-32766,-32766,  975,  775,  774,-32766,  350,-32766,
        -32766,-32766,-32766,-32766,-32766,-32766,-32767,-32767,-32767,-32767,
        -32767,  636,-32766, -195, -194,  784, 1172, 1173, 1174, 1168,
         1167, 1166, 1175, 1169, 1170, 1171,  394,  395,  462,  272,
           53,  397,  788,  789,  790,  791,  445,    0,  446,  983,
          984,   39,  254,  338,  298,  845,  792,  793,  794,  795,
          796,  797,  798,  799,  800,  801,  821,  590,  822,  823,
          824,  825,  813,  814,  355,  356,  816,  817,  802,  803,
          804,  806,  807,  808,  370,  848,  849,  850,  851,  852,
          591,  361,  306,    3,  809,  810,  592,  593,  244,  833,
          831,  832,  844,  828,  829, 1340,  362,  594,  595,  827,
          596,  597,  598,  599, 1076,  600,  601, -204,  243, -640,
          494,  495,  830,  602,  603,    4,  139, -640,  133,  134,
          135,  589,  136,  137, 1112,  781,  782,  783,  138,   41,
        -32766, -353, 1073, 1068, 1067, 1066, 1072, 1069, 1070, 1071,
        -32766,-32766,-32766,-32767,-32767,-32767,-32767,  106,  107,  108,
          109,  110,  975,  775,  774, 1085,  350,-32766,-32766,-32766,
            5,-32766,  867,-32766,-32766,-32766,-32766,-32766,-32766,-32766,
          951, -195, -194,  784,-32766,-32766,-32766,  865,-32766,  297,
        -32766,-32766,-32766,-32766,-32766, 1398, 1382,  272,   53,  397,
          788,  789,  790,  791, -637,-32766,  446,-32766,-32766,-32766,
        -32766,  744, -637,  845,  792,  793,  794,  795,  796,  797,
          798,  799,  800,  801,  821,  590,  822,  823,  824,  825,
          813,  814,  355,  356,  816,  817,  802,  803,  804,  806,
          807,  808,  370,  848,  849,  850,  851,  852,  591, -591,
         -287,  303,  809,  810,  592,  593, -589,  833,  831,  832,
          844,  828,  829,  972,  941,  594,  595,  827,  596,  597,
          598,  599,  144,  600,  601,  856,  336,-32766,-32766,-32766,
          830,  602,  603, -640,  139, -640,  133,  134,  135,  589,
          136,  137, 1109,  781,  782,  783,  138,   41,-32766, 1146,
        -32766,-32766,-32766,  768,-32766,-32766,-32766,   29,  642,  394,
          395,-32766,-32766,-32766,  357,   38, -591, -591, 1108,  445,
          508,  775,  774, -589, -589,-32766, 1320,-32766,-32766,  111,
          112,  113, -591,  282,  858,  866,  140, 1427,  951, -589,
         1428,  784,  149,  953, -597,  114, -591,  740,  294,  298,
          257, -596,  974, -589, 1035,  272,   53,  397,  788,  789,
          790,  791,  145,   86,  446,  306,  336,  336, -637,  745,
         -637,  845,  792,  793,  794,  795,  796,  797,  798,  799,
          800,  801,  821,  590,  822,  823,  824,  825,  813,  814,
          355,  356,  816,  817,  802,  803,  804,  806,  807,  808,
          370,  848,  849,  850,  851,  852,  591, -588,  865, -590,
          809,  810,  592,  593,  860,  833,  831,  832,  844,  828,
          829,  742,  941,  594,  595,  827,  596,  597,  598,  599,
          755,  600,  601,  585, 1082,-32766,-32766,  -85,  830,  602,
          603,  893,  152,  894,  133,  134,  135,  589,  136,  137,
         1114,  781,  782,  783,  138,   41,  509,  988,  987, 1085,
         1085, 1085,-32766,-32766,-32766,  856,-32766,  131, 1004, 1005,
         -394, 1082, -394, 1006, -588, -588, -590, -590,  317,  775,
          774,  951, 1000,  290,  297,  297, 1036,  861,  951,-32766,
         -588,   79, -590,  321,  864,  951, 1085,  336, 1352,  784,
          333,  953, -595,  -85, -588,  740, -590,  986,  108,  109,
          110,  351,  746,  272,   53,  397,  788,  789,  790,  791,
          290,  154,  446,  484,  485,  486,  748,-32766,-32766,  845,
          792,  793,  794,  795,  796,  797,  798,  799,  800,  801,
          821,  590,  822,  823,  824,  825,  813,  814,  355,  356,
          816,  817,  802,  803,  804,  806,  807,  808,  370,  848,
          849,  850,  851,  852,  591,  941,  446,  862,  809,  810,
          592,  593,  941,  833,  831,  832,  844,  828,  829,  941,
          155,  594,  595,  827,  596,  597,  598,  599,  352,  600,
          601,  157,   87,   88,   89,  384,  830,  602,  603,  388,
          152,  805,  776,  777,  778,  779,  780,  295,  781,  782,
          783,  818,  819,   40,   27,   90,   91,   92,   93,   94,
           95,   96,   97,   98,   99,  100,  101,  102,  103,  104,
          105,  106,  107,  108,  109,  110,  111,  112,  113, 1161,
          282,-32766, 1082,  404, 1021, 1315, 1314, 1316,  740,  396,
          395,  953,  114,-32766, 1147,  740,  784,  466,  953,  445,
          775,  774,  740, 1145,  685,   23, 1085, 1085,  705,  706,
          785,  786,  787,  788,  789,  790,  791,-32766,  406,  854,
           10, -593,  893, -631,  894, -631,  845,  792,  793,  794,
          795,  796,  797,  798,  799,  800,  801,  821,  843,  822,
          823,  824,  825,  813,  814,  815,  842,  816,  817,  802,
          803,  804,  806,  807,  808,  847,  848,  849,  850,  851,
          852,  853,  153,  428,  467,  809,  810,  811,  812,  468,
          833,  831,  832,  844,  828,  829,  392,  393,  820,  826,
          827,  834,  835,  837,  836,  469,  838,  839, -593, -593,
          398,  399,  871,  830,  841,  840,   54,   55,   56,   57,
          541,   58,   59,  158, -110,  676,  677,   60,   61, -110,
           62, -110,  951,  159,  161,   36,  313,  -87, -593, -110,
         -110, -110, -110, -110, -110, -110, -110, -110, -110, -110,
         1320,  -78,  -58,  -57,  128,  129,  141,  142,  148,  162,
          163,  164,  165,  757,  166,   63,   64,  365, -587, 1313,
          296,   65,   51,   66,  251,  252,   67,   68,   69,   70,
           71,   72,   73,   74,  -84,   31,  273,   47,  464,  542,
          -78, -369,  -73, 1346, 1347,  543,  -72,  865,  -71,  -70,
          -69, 1344,   45,   22,  544, 1311,  545,  -68,  546,  -67,
          547,  -66,  951,  548,  549,  -65,  941,  -46,   48,   49,
          470,  391,  390,  -18,   50,  550,  146,  281,  291, 1084,
          382,  349,  865,  756,  759, -587, -587, 1306,  950,  307,
          308,  151,  552,  553,  554,  299, -321,  968, 1315, 1314,
         1316, -587, -317,  294,  556,  557,  286, 1332, 1333, 1334,
         1335, 1337, 1329, 1330,  305, -587,  287, -110, -110,  130,
         1336, 1331, -110,  292, 1315, 1314, 1316,  306,  293,  343,
           75, -110,  300,  282,  331,  332,  336, -154, -154, -154,
        -32766,  114,  716,   -4,  951,  953,  941,  150,  856,  740,
          733,  865, -154,  722, -154,  607, -154, 1179, -154,-32766,
          691, 1429,  306,  692,  674,   79, 1001,  311,  389,  686,
          314,  336,  728,  320, 1351,  312,   52,  708, -553, 1004,
         1005,   13,  775,  774,  551,  709,  491,  519,-32766,  723,
         1353,  970,  927, 1000, -110, -110, -110,   35,  115,  116,
          117,  118,  119,  120,  121,  122,  123,  124,  125,  126,
          127,  613,  640,  724,  725,   31,  274,   37, 1279,    0,
            0,    0,    0,    0,    0,  953,    0,  865,  941,  740,
         -154, 1344, 1315, 1314, 1316,   11,    0,    0,  290,   30,
         1221, 1223,    0,  309,  310,  386,  864,    0,    0,    0,
          389, -587,  460,  306,    0,    0,    0,  304,    0,  387,
           43, 1004, 1005,   44,  764,  765,  551, 1306,  884, -625,
          932,  775,  774,  132,  555, 1000, -110, -110, -110, 1045,
         1022, 1029, 1320, 1019,  556,  557, 1030, 1332, 1333, 1334,
         1335, 1337, 1329, 1330,  930, 1017, 1150, 1153,   21, 1154,
         1336, 1331, 1151, 1152,  775,  774, 1158,  953,-32766,  330,
           77,  740,   -4,  -16, 1313,  332,  336, 1341, -587, -587,
          876,-32766,-32766,-32766, 1368,-32766, 1386,-32766, 1420,-32766,
          679, -290,-32766, -624, -587, -623, -597,-32766,-32766,-32766,
         -596,-32766, -595,-32766,-32766, -594,  385, 1313, -587,-32766,
          442,   31,  273, -537,-32766,-32766,-32766, -204,-32766,    1,
        -32766,-32766,-32766,  865,  865,-32766,   32, 1344,   33,   42,
        -32766,-32766,-32766,   46,   76,   80,-32766,-32766,   81,   82,
           83,   84,-32766,  442,   85,  147,   31,  274,  156,  160,
          249,  339,   78,  371,-32766,  372,  373,  374,  865, -110,
         -110,  375, 1344, 1306, -110,  376,  377,  378,  379,  380,
          381,  383,  461, -110,  584,  741, -288, -287,   15,   16,
           17,  557,-32766, 1332, 1333, 1334, 1335, 1337, 1329, 1330,
           18,   20,  425,  -50,  510,  511, 1336, 1331, 1306,  518,
          521,  522,  523,  524,  306,  529,   77,   79,  427,  530,
          531,  332,  336,  336,  539,  618,  557,  720, 1332, 1333,
         1334, 1335, 1337, 1329, 1330, 1115,  143, 1111, 1261, 1342,
         1113, 1336, 1331, 1110, 1091, 1301,-32766, 1087, -292, -102,
           14,   77, 1313,   19,   24,  303,  332,  336,  424,-32766,
        -32766,-32766,  631,-32766,  637,-32766,  665,-32766,  727, 1265,
        -32766, 1319, 1262, 1399, 1345,-32766,-32766,-32766,  747,-32766,
          749,-32766,-32766,  750,  751, 1313,  752,-32766,  442,  753,
          754,  758,-32766,-32766,-32766,  743,-32766,  431,-32766,-32766,
        -32766,  761,  928,-32766, 1424, 1426,  887,  886,-32766,-32766,
        -32766, 1037,-32766, 1425,-32766,-32766,  951,  994, 1313,  993,
        -32766,  442,  995,  991, 1294,-32766,-32766,-32766,  961,-32766,
          992,-32766,-32766,-32766,  971,  959,-32766, 1027, 1028,  951,
            0,-32766,-32766,-32766,  663,-32766, 1423,-32766,-32766, 1380,
         1369, 1313, 1387,-32766,  442, 1396,  336,    0,-32766,-32766,
        -32766,    0,-32766,    0,-32766,-32766,-32766,    0,    0,-32766,
            0,    0,    0,  514,-32766,-32766,-32766,    0,-32766,    0,
        -32766,-32766,    0,    0, 1313,  620,-32766,  442,    0,    0,
            0,-32766,-32766,-32766,    0,-32766,    0,-32766,-32766,-32766,
          941,    0,-32766,    2,    0,    0,    0,-32766,-32766,-32766,
            0,    0,    0,-32766,-32766,    0, -265, -265, -265,-32766,
          442,    0,  389,  941,    0,    0,    0,    0,    0,    0,
            0,-32766,    0, 1004, 1005,    0,    0,    0,  551, -264,
         -264, -264,    0,    0,    0,  389,  927, 1000, -110, -110,
         -110,    0,    0,    0,    0,    0, 1004, 1005,    0,    0,
            0,  551,    0,    0,    0,    0,    0,    0,    0,  927,
         1000, -110, -110, -110,-32766,    0,    0,    0,    0,  953,
         1313,    0,    0,  740, -265,    0,    0,-32766,-32766,-32766,
            0,-32766,    0,-32766,    0,-32766,    0,    0,-32766,    0,
            0,    0,  953,-32766,-32766,-32766,  740, -264,    0,-32766,
        -32766,    0,    0,    0,    0,-32766,  442,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,-32766
    );

    protected array $actionCheck = array(
            3,    4,    5,    6,    7,    8,    1,   10,   11,   12,
           13,   14,   83,    9,    9,   86,   10,   11,   12,   81,
           81,  117,  118,  119,  120,  121,  122,  123,  124,  125,
          126,   10,   11,   12,   41,   38,   39,   31,   45,   33,
           34,   35,   36,   37,   38,   39,   40,   41,   42,   43,
           44,    1,   31,    9,    9,   58,  117,  118,  119,  120,
          121,  122,  123,  124,  125,  126,  107,  108,  109,   72,
           73,   74,   75,   76,   77,   78,  117,    0,   81,  141,
          142,  152,  153,   71,   31,   88,   89,   90,   91,   92,
           93,   94,   95,   96,   97,   98,   99,  100,  101,  102,
          103,  104,  105,  106,  107,  108,  109,  110,  111,  112,
          113,  114,  115,  116,  117,  118,  119,  120,  121,  122,
          123,   17,  163,    9,  127,  128,  129,  130,   15,  132,
          133,  134,  135,  136,  137,    1,   32,  140,  141,  142,
          143,  144,  145,  146,    1,  148,  149,  154,   98,    1,
          138,  139,  155,  156,  157,    9,  159,    9,    3,    4,
            5,    6,    7,    8,  167,   10,   11,   12,   13,   14,
          117,  167,  119,  120,  121,  122,  123,  124,  125,  126,
           10,   11,   12,   45,   46,   47,   48,   49,   50,   51,
           52,   53,   41,   38,   39,  142,   45,   10,   11,   12,
            9,   31,    1,   33,   34,   35,   36,   37,   38,   39,
            1,  167,  167,   58,   10,   11,   12,   83,   31,  166,
           33,   34,   35,   36,   37,    1,    1,   72,   73,   74,
           75,   76,   77,   78,    1,   31,   81,   33,   34,   35,
           36,   32,    9,   88,   89,   90,   91,   92,   93,   94,
           95,   96,   97,   98,   99,  100,  101,  102,  103,  104,
          105,  106,  107,  108,  109,  110,  111,  112,  113,  114,
          115,  116,  117,  118,  119,  120,  121,  122,  123,   71,
          167,  167,  127,  128,  129,  130,   71,  132,  133,  134,
          135,  136,  137,    1,   85,  140,  141,  142,  143,  144,
          145,  146,  168,  148,  149,   81,  172,   10,   11,   12,
          155,  156,  157,  165,  159,  167,    3,    4,    5,    6,
            7,    8,  167,   10,   11,   12,   13,   14,   31,  164,
           33,   34,   35,  168,   10,   11,   12,    9,   52,  107,
          108,   10,   11,   12,    9,    9,  138,  139,    1,  117,
           32,   38,   39,  138,  139,   31,    1,   33,   34,   54,
           55,   56,  154,   58,   81,  164,    9,   81,    1,  154,
           84,   58,    9,  164,  166,   70,  168,  168,   31,   31,
            9,  166,   47,  168,   32,   72,   73,   74,   75,   76,
           77,   78,  168,  168,   81,  163,  172,  172,  165,   32,
          167,   88,   89,   90,   91,   92,   93,   94,   95,   96,
           97,   98,   99,  100,  101,  102,  103,  104,  105,  106,
          107,  108,  109,  110,  111,  112,  113,  114,  115,  116,
          117,  118,  119,  120,  121,  122,  123,   71,   83,   71,
          127,  128,  129,  130,  161,  132,  133,  134,  135,  136,
          137,  168,   85,  140,  141,  142,  143,  144,  145,  146,
          168,  148,  149,   86,  117,  117,  117,   32,  155,  156,
          157,  107,  159,  109,    3,    4,    5,    6,    7,    8,
          167,   10,   11,   12,   13,   14,  168,   73,   74,  142,
          142,  142,   10,   11,   12,   81,  141,   15,  118,  119,
          107,  117,  109,  123,  138,  139,  138,  139,    9,   38,
           39,    1,  132,  166,  166,  166,  164,   81,    1,   10,
          154,  166,  154,    9,  160,    1,  142,  172,  151,   58,
            9,  164,  166,   98,  168,  168,  168,  123,   51,   52,
           53,    9,   32,   72,   73,   74,   75,   76,   77,   78,
          166,   15,   81,  133,  134,  135,   32,   10,   11,   88,
           89,   90,   91,   92,   93,   94,   95,   96,   97,   98,
           99,  100,  101,  102,  103,  104,  105,  106,  107,  108,
          109,  110,  111,  112,  113,  114,  115,  116,  117,  118,
          119,  120,  121,  122,  123,   85,   81,  161,  127,  128,
          129,  130,   85,  132,  133,  134,  135,  136,  137,   85,
           15,  140,  141,  142,  143,  144,  145,  146,    9,  148,
          149,   15,   10,   11,   12,    9,  155,  156,  157,    9,
          159,    3,    4,    5,    6,    7,    8,   38,   10,   11,
           12,   13,   14,   31,  102,   33,   34,   35,   36,   37,
           38,   39,   40,   41,   42,   43,   44,   45,   46,   47,
           48,   49,   50,   51,   52,   53,   54,   55,   56,  127,
           58,  117,  117,    9,  164,  160,  161,  162,  168,  107,
          108,  164,   70,  117,  169,  168,   58,    9,  164,  117,
           38,   39,  168,    1,   76,   77,  142,  142,   76,   77,
           72,   73,   74,   75,   76,   77,   78,  141,  107,   81,
          109,   71,  107,  165,  109,  167,   88,   89,   90,   91,
           92,   93,   94,   95,   96,   97,   98,   99,  100,  101,
          102,  103,  104,  105,  106,  107,  108,  109,  110,  111,
          112,  113,  114,  115,  116,  117,  118,  119,  120,  121,
          122,  123,  102,  103,    9,  127,  128,  129,  130,    9,
          132,  133,  134,  135,  136,  137,  107,  108,  140,  141,
          142,  143,  144,  145,  146,    9,  148,  149,  138,  139,
          107,  108,    9,  155,  156,  157,    2,    3,    4,    5,
            6,    7,    8,   15,  102,  112,  113,   13,   14,  107,
           16,  109,    1,   15,   15,   15,  114,   32,  168,  117,
          118,  119,  120,  121,  122,  123,  124,  125,  126,  127,
            1,   17,   17,   17,   17,   17,   17,   17,   17,   17,
           17,   17,   17,   32,   17,   51,   52,   17,   71,   81,
           38,   57,   71,   59,   60,   61,   62,   63,   64,   65,
           66,   67,   68,   69,   32,   71,   72,   73,   74,   75,
           32,  169,   32,   79,   80,   81,   32,   83,   32,   32,
           32,   87,   88,   89,   90,  117,   92,   32,   94,   32,
           96,   32,    1,   99,  100,   32,   85,   32,  104,  105,
          106,  107,  108,   32,  110,  111,   32,   32,   32,  141,
          116,  117,   83,   32,   32,  138,  139,  123,   32,  138,
          139,   32,  128,  129,  130,   38,   36,   39,  160,  161,
          162,  154,   36,   31,  140,  141,   36,  143,  144,  145,
          146,  147,  148,  149,  150,  168,   36,  118,  119,  168,
          156,  157,  123,   36,  160,  161,  162,  163,   36,   36,
          166,  132,   38,   58,  170,  171,  172,   76,   77,   78,
          141,   70,   78,    0,    1,  164,   85,   71,   81,  168,
           81,   83,   91,   81,   93,   90,   95,   83,   97,   86,
           97,   84,  163,  101,  114,  166,  132,  136,  107,   91,
          115,  172,   93,  136,  151,  137,   71,   95,  154,  118,
          119,   98,   38,   39,  123,  101,   98,   98,  141,  117,
          151,  159,  131,  132,  133,  134,  135,   17,   18,   19,
           20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
           30,  158,  158,  141,  142,   71,   72,  168,  170,   -1,
           -1,   -1,   -1,   -1,   -1,  164,   -1,   83,   85,  168,
          169,   87,  160,  161,  162,  154,   -1,   -1,  166,  154,
           60,   61,   -1,  138,  139,  154,  160,   -1,   -1,   -1,
          107,   71,  109,  163,   -1,   -1,   -1,  114,   -1,  154,
          164,  118,  119,  164,  164,  164,  123,  123,  164,  166,
          164,   38,   39,  168,  131,  132,  133,  134,  135,  164,
          164,  164,    1,  164,  140,  141,  164,  143,  144,  145,
          146,  147,  148,  149,  164,  164,  164,  164,  155,  164,
          156,  157,  164,  164,   38,   39,  164,  164,   75,  168,
          166,  168,  169,   32,   81,  171,  172,  165,  138,  139,
          165,   88,   89,   90,  165,   92,  165,   94,  165,   96,
          165,  167,   99,  166,  154,  166,  166,  104,  105,  106,
          166,   75,  166,  110,  111,  166,  168,   81,  168,  116,
          117,   71,   72,  166,   88,   89,   90,  166,   92,  166,
           94,  128,   96,   83,   83,   99,  166,   87,  166,  166,
          104,  105,  106,  166,  166,  166,  110,  111,  166,  166,
          166,  166,  116,  117,  166,  166,   71,   72,  166,  166,
          166,  166,  159,  166,  128,  166,  166,  166,   83,  118,
          119,  166,   87,  123,  123,  166,  166,  166,  166,  166,
          166,  166,  166,  132,  166,  168,  167,  167,  167,  167,
          167,  141,  141,  143,  144,  145,  146,  147,  148,  149,
          167,  167,  167,   32,  167,  167,  156,  157,  123,  167,
          167,  167,  167,  167,  163,  167,  166,  166,  169,  167,
          167,  171,  172,  172,  167,  167,  141,  167,  143,  144,
          145,  146,  147,  148,  149,  167,   32,  167,  167,  167,
          167,  156,  157,  167,  167,  167,   75,  167,  167,  167,
          167,  166,   81,  167,  167,  167,  171,  172,  167,   88,
           89,   90,  167,   92,  167,   94,  167,   96,  167,  167,
           99,  167,  167,  167,  171,  104,  105,  106,  168,   75,
          168,  110,  111,  168,  168,   81,  168,  116,  117,  168,
          168,  168,   88,   89,   90,  168,   92,  169,   94,  128,
           96,  169,  169,   99,  169,  169,  169,  169,  104,  105,
          106,  169,   75,  169,  110,  111,    1,  169,   81,  169,
          116,  117,  169,  169,  169,   88,   89,   90,  169,   92,
          169,   94,  128,   96,  169,  169,   99,  169,  169,    1,
           -1,  104,  105,  106,  169,   75,  169,  110,  111,  169,
          169,   81,  169,  116,  117,  169,  172,   -1,   88,   89,
           90,   -1,   92,   -1,   94,  128,   96,   -1,   -1,   99,
           -1,   -1,   -1,  103,  104,  105,  106,   -1,   75,   -1,
          110,  111,   -1,   -1,   81,   82,  116,  117,   -1,   -1,
           -1,   88,   89,   90,   -1,   92,   -1,   94,  128,   96,
           85,   -1,   99,  166,   -1,   -1,   -1,  104,  105,  106,
           -1,   -1,   -1,  110,  111,   -1,  101,  102,  103,  116,
          117,   -1,  107,   85,   -1,   -1,   -1,   -1,   -1,   -1,
           -1,  128,   -1,  118,  119,   -1,   -1,   -1,  123,  101,
          102,  103,   -1,   -1,   -1,  107,  131,  132,  133,  134,
          135,   -1,   -1,   -1,   -1,   -1,  118,  119,   -1,   -1,
           -1,  123,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  131,
          132,  133,  134,  135,   75,   -1,   -1,   -1,   -1,  164,
           81,   -1,   -1,  168,  169,   -1,   -1,   88,   89,   90,
           -1,   92,   -1,   94,   -1,   96,   -1,   -1,   99,   -1,
           -1,   -1,  164,  104,  105,  106,  168,  169,   -1,  110,
          111,   -1,   -1,   -1,   -1,  116,  117,   -1,   -1,   -1,
           -1,   -1,   -1,   -1,   -1,   -1,   -1,  128
    );

    protected array $actionBase = array(
            0,  155,   -3,  313,  471,  471,  881,  963, 1365, 1388,
          892,  134,  515,  -61,  367,  524,  524,  801,  524,  209,
          510,  283,  517,  517,  517,  959,  889,  628,  628,  889,
          628, 1053, 1053, 1053, 1053, 1086, 1086, 1320, 1320, 1353,
         1254, 1221, 1449, 1449, 1449, 1449, 1449, 1287, 1449, 1449,
         1449, 1449, 1449, 1287, 1449, 1449, 1449, 1449, 1449, 1449,
         1449, 1449, 1449, 1449, 1449, 1449, 1449, 1449, 1449, 1449,
         1449, 1449, 1449, 1449, 1449, 1449, 1449, 1449, 1449, 1449,
         1449, 1449, 1449, 1449, 1449, 1449, 1449, 1449, 1449, 1449,
         1449, 1449, 1449, 1449, 1449, 1449, 1449, 1449, 1449, 1449,
         1449, 1449, 1449, 1449, 1449, 1449, 1449, 1449, 1449, 1449,
         1449, 1449, 1449, 1449, 1449, 1449, 1449, 1449, 1449, 1449,
         1449, 1449, 1449, 1449, 1449, 1449, 1449, 1449, 1449, 1449,
         1449, 1449, 1449, 1449, 1449, 1449, 1449, 1449, 1449, 1449,
         1449, 1449, 1449, 1449, 1449, 1449, 1449, 1449, 1449, 1449,
         1449, 1449, 1449, 1449, 1449, 1449, 1449, 1449, 1449, 1449,
         1449, 1449, 1449, 1449, 1449, 1449, 1449,  201,  352,  114,
           50,  790, 1138, 1152, 1145, 1154, 1136, 1133, 1141, 1147,
         1155, 1227, 1230,  879, 1231, 1233, 1225, 1236, 1149,  985,
         1137, 1151,  612,  612,  612,  612,  612,  612,  612,  612,
          612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
          612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
          509,  482,  547,  331,  331,  331,  331,  331,  331,  331,
          331,  331,  331,  331,  331,  331,  331,  331,  331,  331,
          331,  331,  331,  964,  964,   21,   21,   21,  324, 1135,
         1100, 1135, 1135, 1135, 1135, 1135, 1135, 1135, 1135,  297,
          204, 1000,  187,  170,  170,    6,    6,    6,    6,    6,
          692,   53, 1101,  819,  819,  138,  138,  138,  138,  542,
          393,  347,  355,  -41,  348,  232,  384,  384,  487,  487,
          555,  555,  349,  349,  555,  555,  555,  554,  554,  554,
          554,  208,  215,  366,  364,  377,  867,  224,  224,  224,
          224,  867,  867,  867,  867,  859, 1153,  867, 1047, 1059,
          867,  867,  368,  767,  767,  925,  305,  305,  305,  767,
          605,  -71,  -71,  605,  380,  -71,  225,   -7,  286,  566,
          854,  572,  548,  566,  640,  771,  233,  148,  906,  659,
          -62,  906, 1132,  893,  893,  855,  830,  -62,  962, 1177,
         1156,  -62,  -62,  882, 1218,  -62,  904, 1219,  420,   12,
          828, 1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131,
         1131, 1131, 1234,  652, 1132,  436, 1234, 1234, 1234,  652,
          652,  652,  652,  652,  652,  652,  652,  861,  652,  652,
          683,  436,  618,  622,  436,  913,  652,  151,  201,  201,
          201,  201,  201,  201,  201,  201,  201,  151,  151,  201,
          201,  151,  151,  151,  318,  201,  151,  201,  352,  292,
          292,  201,  143,  292,  292,  292,  165,  292,  201,  201,
          201,  201,  659,  895,  873,  673,  435,  874,   45,  895,
          895,  895,  335,  104,    4,  113,   44,  880,  886,  601,
          887,  887,  887,  894, 1013, 1013,  887,  888,  887,  894,
          887,  887, 1013, 1013,  910, 1011,  357,  678,  532,  620,
          745, 1013,  499,  887,  887,  887,  887, 1013,  146,  191,
          750,  887,  371,  363,  887,  887,  866,  857, 1013, 1013,
         1013,  857,  616,  857,  851,  858,  858,  858,  920,  921,
          870,  865,  521,  858,  773,  336,  878,  865,  865,  887,
          664,  870,  865,  870,  865,  514,  852,  865,  865,  865,
          870,  865,  888,  609,  865,  812,  813,  766,  328,  865,
           77, 1028, 1029,  775, 1032, 1023, 1033, 1066, 1034, 1035,
         1067, 1007, 1044, 1027, 1038, 1068, 1022, 1020,  876,  807,
          808,  901,  844,  999,  891,  891,  891,  990,  994,  891,
          891,  891,  891,  891,  891,  891,  891,  807,  972,  911,
          885, 1049,  809,  810, 1108,  843, 1183,  868, 1047, 1028,
         1035,  822, 1027, 1038, 1022, 1020,  853,  849,  845,  847,
          838,  837,  834,  836,  864, 1118, 1120, 1039,  916,  811,
         1084, 1050, 1182,  961, 1051, 1055, 1085, 1121,  924, 1122,
         1185,  896, 1186, 1187,  975, 1060,  891,  989,  923,  979,
         1059,  996,  807,  981, 1123, 1126, 1071,  869, 1087, 1088,
          998,  908,  897,  983, 1188, 1061, 1062, 1063, 1160,  919,
         1072,  984, 1092,  909, 1099, 1093, 1094, 1095, 1096, 1162,
         1165,  820, 1166,  987, 1168,  926,  898, 1069,  883, 1192,
          536,  907,  912,  914, 1065,  595, 1045, 1171, 1178, 1194,
         1098, 1102, 1103, 1172, 1198, 1042,  935, 1073,  902, 1083,
         1070,  936,  937,  606,  877, 1127,  890,  900,  802,  778,
          788, 1200, 1203, 1204, 1205, 1043,  871,  884,  939,  942,
         1128,  599, 1130, 1209,  789, 1211,  950, 1215, 1110,  899,
         1173,  814,  815,  804,  806,  805,  817,  872,  951,  905,
          875,  903, 1064,  815, 1216,  952,  953,  955, 1107,  958,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
          784,  784,  784,  784,  784,  784,  784,  784,  784,  628,
          628,  628,  628,  784,  784,  784,  784,  784,  784,  784,
          628,  784,  784,  784,  628,  628,    0,    0,  628,    0,
          784,  784,  784,  784,  784,  784,  784,  784,  784,  784,
          784,  784,  784,  784,  784,  784,  784,  784,  784,  784,
          784,  784,  784,  784,  784,  784,  784,  784,  784,  784,
          784,  784,  784,  784,  784,  784,  784,  784,  784,  784,
          784,  784,  784,  784,  784,  784,  784,  784,  784,  784,
          784,  784,  784,  784,  784,  784,  784,  784,  784,  784,
          784,  784,  784,  784,  784,  784,  784,  784,  784,  784,
          784,  784,  784,  784,  784,  784,  784,  784,  784,  784,
          784,  784,  784,  784,  784,  784,  784,  784,  784,  784,
          784,  784,  784,  784,  784,  784,  784,  784,  784,  784,
          784,  784,  784,  784,  784,  784,  784,  784,  784,  784,
          784,  784,  784,  784,  784,  784,  784,  784,  784,  784,
          784,  784,  784,  784,  784,  784,  784,  784,  784,  784,
          784,  784,  784,  784,  784,  784,  612,  612,  612,  612,
          612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
          612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
          612,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,  612,
          612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
          612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
          612,  612,  758,  758,  612,  612,  612,  612,  758,  758,
          758,  758,  758,  758,  758,  758,  758,  758,  612,  612,
            0,  612,  612,  612,  612,  612,  612,  612,  612,  910,
          758,  758,  758,  758,  305,  305,  305,  305,  -96,  -96,
          758,  758,  380,  758,  380,  758,  758,  305,  305,  758,
          758,  758,  758,  758,  758,  758,  758,  758,  758,  758,
            0,    0,    0,  436,  -71,  758,  888,  888,  888,  888,
          758,  758,  758,  758,  -71,  -71,  758,  414,  414,  758,
          758,    0,    0,    0,    0,    0,    0,    0,    0,  436,
            0,    0,  436,    0,    0,  888, 1013,  888,  758,  380,
          910,    5,  758,    0,    0,    0,    0,  436,  888,    0,
          436,  652,  -71,  -71,  652,  652,    0,  292,  201,    5,
            0,    0,  650,  650,    0,  650,  650,    0,    0,  659,
          910,  910,  910,  910,  910,  910,  910,  910,  910,  910,
          910,  888,    0,  910,    0,  888,  888,  888,    0,    0,
            0,    0,    0,    0,    0,    0, 1013,    0,    0,    0,
            0,    0,    0,    0,  888,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,  888,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,  891,  908,    0,    0,  908,    0,  891,  891,
          891,    0,    0,    0,    0,    0,  877,  599
    );

    protected array $actionDefault = array(
            3,32767,32767,32767,  102,  102,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,  100,
        32767,  643,  643,  643,  643,32767,32767,  269,  102,32767,
        32767,  512,  427,  427,  427,32767,32767,32767,  585,  585,
          585,  585,  585,   17,32767,32767,32767,32767,32767,32767,
        32767,  512,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,   36,    7,    8,   10,   11,   49,  350,
          100,32767,32767,32767,32767,32767,32767,32767,32767,  102,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,  636,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,  415,  506,  516,  494,  495,  497,  498,  426,
          586,  642,  356,  639,  354,  425,  146,  366,  355,  257,
          273,  517,  274,  518,  521,  522,  230,  412,  150,  151,
          458,  513,  460,  511,  515,  459,  432,  439,  440,  441,
          442,  443,  444,  445,  446,  447,  448,  449,  450,  451,
          430,  431,  514,32767,32767,  491,  490,  489,  456,32767,
        32767,32767,32767,32767,32767,32767,32767,  102,32767,  457,
          461,  429,  464,  462,  463,  480,  481,  478,  479,  482,
        32767,  335,32767,32767,32767,  483,  484,  485,  486,  393,
          391,32767,32767,  111,  335,  111,32767,32767,  471,  472,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,  529,  579,  488,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,  102,32767,32767,
        32767,  100,  581,  453,  455,  549,  466,  467,  465,  433,
        32767,  554,32767,  102,32767,  556,32767,  559,32767,32767,
        32767,32767,32767,32767,  580,32767,  587,  587,32767,  542,
        32767,  100,  196,32767,  555,  196,  196,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,  650,
          542,  110,  110,  110,  110,  110,  110,  110,  110,  110,
          110,  110,32767,  196,  110,32767,32767,32767,  100,  196,
          196,  196,  196,  196,  196,  196,  196,  557,  196,  196,
          191,32767,  283,  285,  102,  604,  196,  204,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,  204,  204,32767,
        32767,  204,  204,  204,32767,32767,  204,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,  542,  476,  139,32767,  544,  139,  587,  468,
          469,  470,32767,  209,  587,  587,  587,  331,  308,32767,
        32767,32767,32767,32767,  557,  557,  100,  100,  100,  100,
        32767,32767,32767,32767,  111,  528,   99,   99,   99,   99,
           99,  103,  101,32767,32767,32767,32767,32767,  101,  101,
           99,32767,  101,  101,32767,32767,  227,  238,32767,  608,
          609,  238,  101,  238,  240,  242,  242,  242,  262,  262,
          531,  337,  101,  242,  101,  101,  198,  337,  337,32767,
          101,  531,  337,  531,  337,   99,  200,  337,  337,  337,
          531,  337,32767,  101,  337,  415,  229,   99,   99,  337,
        32767,32767,32767,  544,32767,32767,32767,32767,32767,32767,
        32767,  237,32767,32767,32767,32767,32767,32767,32767,32767,
          574,32767,  592,  606,  474,  475,  477,  591,  589,  499,
          500,  501,  502,  503,  504,  505,  508,  638,32767,  548,
        32767,32767,32767,  365,32767,  648,32767,32767,32767,    9,
           74,  537,   42,   43,   51,   57,  563,  564,  565,  566,
          560,  561,  567,  562,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
          649,32767,  587,32767,32767,32767,  473,  569,  614,32767,
        32767,  588,  641,32767,32767,32767,32767,32767,32767,32767,
        32767,  139,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,  574,32767,  137,32767,32767,32767,32767,32767,32767,
        32767,  210,32767,  570,32767,32767,32767,  587,32767,32767,
        32767,32767,  333,  330,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
          587,32767,32767,32767,32767,32767,  310,32767,  327,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,32767,32767,32767,32767,32767,32767,32767,32767,32767,
        32767,  411,  544,  313,  315,  316,32767,32767,32767,32767,
          387,32767,32767,32767,32767,32767,32767,32767,32767,32767,
          153,  153,    3,    3,  153,  153,  153,  368,  153,  368,
          368,  368,  368,  153,  368,  153,  153,  153,  153,  153,
          295,  186,  277,  280,  262,  262,  153,  153,  379
    );

    protected array $goto = array(
          202,  169,  202,  202,  202,  426,  447,  729,  364,  641,
          612,  649,  687,  763,  666,  668,  605,  688,  924,  881,
          924,  924,  713,  736,  717, 1055,  719,  734, 1051,  882,
          171,  171,  171,  171,  226,  203,  199,  199,  181,  183,
          221,  199,  199,  199,  199,  199, 1207,  200,  200,  200,
          200,  200, 1207,  193,  194,  195,  196,  197,  198,  223,
          221,  224,  564,  565,  443,  566,  569,  570,  571,  572,
          573,  574,  575,  576,  172,  173,  174,  201,  175,  176,
          177,  170,  178,  179,  180,  182,  220,  222,  225,  245,
          248,  259,  260,  262,  263,  264,  265,  266,  267,  268,
          269,  275,  276,  277,  278,  288,  289,  326,  327,  328,
          449,  450,  451,  626,  227,  228,  229,  230,  231,  232,
          233,  234,  235,  236,  237,  238,  239,  240,  241,  184,
          242,  185,  194,  195,  196,  197,  198,  223,  204,  205,
          206,  207,  246,  186,  187,  208,  188,  209,  205,  189,
          247,  204,  168,  210,  211,  190,  212,  213,  214,  191,
          215,  192,  216,  217,  218,  219,  285,  283,  285,  285,
          885,  255,  255,  255,  255,  255, 1117,  368,  368,  368,
          368,  878,  353,  878,  369,  857,  628,  497,  487,  418,
          863,  503,  648,  504,  369,  369, 1083, 1256,  883,  627,
         1157,  253,  253,  253,  253,  250,  256, 1020,  354,  353,
          369,  369,  441,  739,  369,  536,  732, 1430, 1155,  940,
          935,  936,  949,  891,  937,  888,  938,  939,  583,  917,
          889,  892,  369,  369,  863,  619,  943,  863,  896,  878,
          360,  944,  895,  945,  507,  487,  513,  455,  690, 1144,
         1139, 1140, 1141,  448,  329,  323,  324,  346,  622,  454,
          347,  456,  667,  366,  367, 1403,  426,  407,  407,  407,
          701,  702,  703,  704, 1041,  715,  426,  407,  408,  426,
          617,  426,  426,  689, 1374,  426,  426,  426,  426,  426,
          426,  426,  426,  426,  426,  426, 1107,  577,  577,  577,
          577,  407,  632,  662,  664,  463,  407,  407,  407,  407,
          683,  535,  407,  588,  581,  407,  407, 1395, 1395, 1395,
         1395,  579,  579,  579,  410,  413,  629,  633,  985,  985,
         1203,  579, 1086, 1086,  957,  712,  711,  997,  958,  695,
         1078, 1094, 1095, 1116, 1118, 1121,  583,  318,  581,  588,
          614,  615,  319,  625,  630,  481,  646,  647, 1164, 1165,
         1014, 1014, 1014, 1014,   28,  348,  481,  651,  651, 1008,
         1015,  645,  878, 1343, 1343, 1343, 1343, 1343, 1343, 1343,
         1343, 1343, 1343, 1362, 1362,  483,  875,  483, 1003, 1362,
         1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362,  639,
          652,  655,  656,  657,  658,  680,  681,  682,  738, 1359,
         1359, 1305,  419,  258,  258, 1359, 1359, 1359, 1359, 1359,
         1359, 1359, 1359, 1359, 1359,  904,  912,  900, 1127, 1131,
          474,  977,  474,  474,  474,  726,  465, 1089, 1088, 1023,
          901,  279, 1303,  334,  334,  334,  859, 1385, 1385, 1385,
         1063,  726,  568,  568,  726, 1307, 1128, 1385,  568,  568,
          568,  568,  568,  568,  568,  568,  568,  568,  493,  493,
          582,  609,  582,  899, 1013,  766,  582,  493,  609,  420,
          411,  417, 1397, 1397, 1397, 1397, 1176,  916,  527,  911,
          528,  501,  898,  421,  422,  423,  496,  534,  980,  661,
          913,  909,  981, 1132, 1421, 1422,  567,  567, 1025, 1058,
         1058, 1381,  567, 1178,  567,  567,  567,  567,  567,  567,
          567,  567, 1288,  989, 1092, 1093, 1289, 1292,  990,  907,
         1293,  474,  474,  474,  474,  474,  474,  474,  474,  474,
          474,  474,  634,  635,  474, 1044,  962, 1193, 1016,    0,
          762,  335,  316,  580, 1053, 1048, 1060, 1130,  500, 1388,
         1389, 1383, 1383, 1130, 1390, 1391,  903, 1074,  693, 1039,
          623,  644,  429,  430,  897,  457,    0,  699,    0,  700,
            8,    9,  433,  434,  435,    0,  714, 1302,  457,  437,
         1308, 1309, 1413, 1413,  358,    0, 1090, 1090,    0,  873,
            0,  694, 1101, 1097, 1098, 1295, 1012,  436,  735,    0,
            0,    0, 1413,    0,    0,    0, 1310, 1371, 1372,    0,
            0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
         1416, 1416
    );

    protected array $gotoCheck = array(
           42,   42,   42,   42,   42,   73,   13,   73,  101,   13,
           48,   56,   56,   48,   48,   48,  131,   48,   25,   25,
           25,   25,   48,    9,   48,   48,   48,   48,   48,   26,
           42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
           42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
           42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
           42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
           42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
           42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
           42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
           42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
           42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
           42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
           42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
           42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
           42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
           42,   42,   42,   42,   42,   42,   23,   23,   23,   23,
           15,    5,    5,    5,    5,    5,  135,   24,   24,   24,
           24,   22,  181,   22,   14,    6,  138,   80,   80,  163,
           12,   80,   80,   80,   14,   14,   80,  163,   27,    8,
            8,    5,    5,    5,    5,    5,    5,   49,  181,  181,
           14,   14,   43,    8,   14,    8,    8,   14,    8,   15,
           15,   15,   15,   15,   15,   15,   15,   15,   14,   45,
           15,   15,   14,   14,   12,  185,   15,   12,   15,   22,
          192,   65,   15,   65,   88,   80,   88,   66,   66,   15,
           15,   15,   15,   66,   66,   66,   66,   66,   66,   66,
           66,   66,   66,  101,  101,  194,   73,   73,   73,   73,
           90,   90,   90,   90,  107,   90,   73,   73,   62,   73,
          108,   73,   73,   64,   14,   73,   73,   73,   73,   73,
           73,   73,   73,   73,   73,   73,  119,  111,  111,  111,
          111,   73,  111,   89,   89,  117,   73,   73,   73,   73,
           89,   14,   73,   76,   76,   73,   73,    9,    9,    9,
            9,   19,   19,   19,   59,   59,   59,   59,    9,    9,
          162,   19,   93,   93,   73,  121,   93,   93,   73,  125,
           93,   93,   93,  134,  134,  134,   14,   76,   76,   76,
           76,   76,   76,   76,   76,   19,   76,   76,  152,  152,
           19,   19,   19,   19,   76,   29,   19,  112,  112,   19,
           19,   84,   22,  112,  112,  112,  112,  112,  112,  112,
          112,  112,  112,  183,  183,   87,   18,   87,   96,  183,
          183,  183,  183,  183,  183,  183,  183,  183,  183,   85,
           85,   85,   85,   85,   85,   85,   85,   85,   85,  184,
          184,   14,   28,    5,    5,  184,  184,  184,  184,  184,
          184,  184,  184,  184,  184,   39,   16,   16,   16,   16,
           23,   82,   23,   23,   23,    7,   87,  123,  123,   16,
           37,   24,  173,   24,   24,   24,    7,  138,  138,  138,
          114,    7,  186,  186,    7,   20,  137,  138,  186,  186,
          186,  186,  186,  186,  186,  186,  186,  186,  161,  161,
            9,    9,    9,   35,   16,  103,    9,  161,    9,   31,
            9,    9,  138,  138,  138,  138,   16,   16,  167,   35,
          167,  164,   35,    9,    9,    9,    9,  167,   83,   83,
           41,    9,   83,  140,    9,    9,  169,  169,  100,  111,
          111,  138,  169,  155,  169,  169,  169,  169,  169,  169,
          169,  169,   79,   79,  124,  124,   79,   79,   79,    9,
           79,   23,   23,   23,   23,   23,   23,   23,   23,   23,
           23,   23,   17,   17,   23,   50,   17,   17,   50,   -1,
           50,  182,  182,   50,   50,   50,   17,  138,  189,  189,
          189,  138,  138,  138,  191,  191,   17,  118,   17,   17,
            2,    2,   86,   86,   17,  122,   -1,   86,   -1,   86,
           46,   46,   86,   86,   86,   -1,   86,   17,  122,   86,
           20,   20,  195,  195,   86,   -1,  122,  122,   -1,   20,
           -1,  122,  122,  122,  122,   20,   97,   97,   97,   -1,
           -1,   -1,  195,   -1,   -1,   -1,   20,   20,   20,   -1,
           -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
          195,  195
    );

    protected array $gotoBase = array(
            0,    0, -172,    0,    0,  170,  172,  425,  188,   10,
            0,    0, -114, -342, -121, -189,  -51,   54,   69,   49,
          118,    0, -102,  160,  171,   12,   22,  191,   64,   61,
            0,   17,    0,    0,    0,   88,    0,   89,    0,   92,
            0,   34,   -1,  186,    0,  200, -186,    0, -731,  187,
          531,    0,    0,    0,    0,    0,  -32,    0,    0,  275,
            0,    0,  233,    0,   39,  225,    4,    0,    0,    0,
            0,    0,    0,   -5,    0,    0,  -42,    0,    0,   93,
         -230,    0,   74,  137,   52,   27,   55,  102, -257, -203,
         -479,    0,    0,   46,    0,    0,   48,  294,    0,    0,
           40, -501,    0,   47,    0,    0,    0,  236,  234,    0,
            0,  266,  124,    0,   66,    0,    0,   21,   32,   15,
            0,   45,  304,  151,  232,   42,    0,    0,    0,    0,
            0,   14,    0,    0,  340,  174,    0,   68,  175,    0,
           36,    0,    0,    0,    0,    0,    0,    0,    0,    0,
            0,    0,   79,    0,    0,   44,    0,    0,    0,    0,
            0,  431,   80,  -85,   26,    0,    0,  -33,    0,  263,
            0,    0,    0,   59,    0,    0,    0,    0,    0,    0,
            0, -123,  220,  140,  166,  203,  209,    0,    0,  250,
            0,  178,  207,    0,  231,  277,    0,    0
    );

    protected array $gotoDefault = array(
        -32768,  540,  770,    7,  771,  966,  846,  855,  604,  558,
          737,  359,  653,  444, 1379,  942, 1192,  624,  874, 1321,
         1327,  482,  877,  341,  760,  954,  925,  926,  414,  401,
          890,  412,  678,  654,  520,  910,  478,  902,  512,  905,
          477,  914,  167,  440,  538,  918,    6,  921,  586,  952,
         1018,  402,  929,  403,  707,  931,  608,  933,  934,  409,
          415,  416, 1197,  616,  650,  946,  261,  610,  947,  400,
          948,  956,  405,  337,  718,  492,  532,  526,  432, 1159,
         1312,  452,  976,  453,  611,  638,  675,  471,  506,  660,
          684,  659,  505,  458,  438,  340, 1002, 1010,  525,  490,
         1024,  363, 1032,  767, 1205,  669,  515, 1040,  670, 1047,
         1050,  559,  560,  502, 1062,  271, 1065,  516, 1075,   26,
          696, 1080, 1081,  697,  671, 1103,  672,  698,  673, 1105,
          489,  606, 1206,  488, 1120, 1126,  479, 1129, 1367,  480,
         1133,  270, 1136,  284,  439,  459, 1142, 1143,   12, 1149,
          730,  731,   25,  280,  537, 1177,  721,-32768,-32768,-32768,
        -32768,  476, 1204,  475, 1276, 1278,  587,  517, 1296,  301,
         1299,  710,  533, 1304,  472, 1370,  473,  561,  498,  325,
          562, 1414,  315,  344,  322,  578,  302,  345,  563,  499,
         1376, 1384,  342,   34, 1404, 1415,  621,  643
    );

    protected array $ruleToNonTerminal = array(
            0,    1,    3,    3,    2,    5,    5,    6,    6,    6,
            6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
            6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
            6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
            6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
            6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
            6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
            6,    6,    6,    6,    6,    6,    6,    7,    7,    7,
            7,    7,    7,    7,    7,    8,    8,    9,   10,   11,
           11,   11,   12,   12,   13,   13,   14,   15,   15,   16,
           16,   17,   17,   18,   18,   21,   21,   22,   23,   23,
           24,   24,    4,    4,    4,    4,    4,    4,    4,    4,
            4,    4,    4,    4,   29,   29,   30,   30,   32,   34,
           34,   28,   36,   36,   33,   38,   38,   35,   35,   37,
           37,   39,   39,   31,   40,   40,   41,   43,   44,   44,
           45,   45,   46,   46,   48,   47,   47,   47,   47,   49,
           49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
           49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
           49,   49,   49,   25,   25,   50,   69,   69,   72,   72,
           71,   70,   70,   63,   75,   75,   76,   76,   77,   77,
           78,   78,   79,   79,   80,   80,   80,   81,   81,   82,
           82,   82,   82,   83,   83,   83,   84,   84,   84,   84,
           26,   26,   27,   27,   27,   27,   27,   92,   92,   94,
           94,   87,   87,   95,   95,   96,   96,   96,   88,   88,
           91,   91,   89,   89,   97,   98,   98,   57,   57,   65,
           65,   68,   68,   68,   67,   99,   99,  100,   58,   58,
           58,   58,  101,  101,  102,  102,  103,  103,  104,  105,
          105,  106,  106,  107,  107,   55,   55,   51,   51,  109,
           53,   53,  110,   52,   52,   54,   54,   64,   64,   64,
           64,   85,   85,  113,  113,  115,  115,  116,  116,  116,
          116,  116,  116,  116,  116,  114,  114,  114,  119,  119,
          119,  119,   93,   93,  122,  122,  122,  123,  123,  120,
          120,  124,  124,  126,  126,  127,  127,  121,  128,  128,
          125,  129,  129,  129,  129,  117,  117,   86,   86,   86,
           20,   20,   20,  132,  132,  132,  132,  133,  133,  133,
          131,  130,  130,  135,  135,  135,  134,  134,   60,  136,
          136,  137,   61,  139,  139,  140,  140,  141,  141,   90,
          142,  142,  142,  142,  142,  142,  142,  147,  147,  148,
          148,  149,  149,  149,  149,  149,  150,  151,  151,  146,
          146,  143,  143,  145,  145,  153,  153,  152,  152,  152,
          152,  152,  152,  152,  152,  152,  152,  144,  154,  154,
          156,  155,  155,  157,  157,  118,  158,  158,  160,  160,
          160,  159,  159,   62,  108,  161,  161,   56,   56,   42,
           42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
           42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
           42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
           42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
           42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
           42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
           42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
           42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
           42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
           42,   42,   42,   42,   42,  168,  169,  169,  170,  162,
          162,  167,  167,  171,  172,  172,  173,  174,  175,  175,
          175,  175,   19,   19,   73,   73,   73,   73,  163,  163,
          163,  163,  177,  177,  166,  166,  166,  164,  164,  183,
          183,  183,  183,  183,  183,  183,  183,  183,  183,  184,
          184,  184,  112,  186,  186,  186,  186,  165,  165,  165,
          165,  165,  165,  165,  165,   59,   59,  180,  180,  180,
          180,  180,  187,  187,  176,  176,  176,  176,  188,  188,
          188,  188,  188,  188,   74,   74,   66,   66,   66,   66,
          138,  138,  138,  138,  191,  190,  179,  179,  179,  179,
          179,  179,  179,  178,  178,  178,  189,  189,  189,  189,
          111,  185,  193,  193,  192,  192,  194,  194,  194,  194,
          194,  194,  194,  194,  182,  182,  182,  182,  181,  196,
          195,  195,  195,  195,  195,  195,  195,  195,  197,  197,
          197,  197
    );

    protected array $ruleToLength = array(
            1,    1,    2,    0,    1,    1,    1,    1,    1,    1,
            1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
            1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
            1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
            1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
            1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
            1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
            1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
            1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
            1,    1,    1,    1,    1,    1,    1,    1,    1,    0,
            1,    0,    1,    1,    2,    1,    3,    4,    1,    2,
            0,    1,    1,    1,    1,    4,    3,    5,    4,    3,
            4,    1,    3,    4,    1,    1,    8,    7,    2,    3,
            1,    2,    3,    1,    2,    3,    1,    1,    3,    1,
            3,    1,    2,    2,    3,    1,    3,    2,    3,    1,
            3,    3,    2,    0,    1,    1,    1,    1,    1,    3,
            7,   10,    5,    7,    9,    5,    3,    3,    3,    3,
            3,    3,    1,    2,    5,    7,    9,    6,    5,    6,
            3,    2,    1,    1,    1,    1,    0,    2,    1,    3,
            8,    0,    4,    2,    1,    3,    0,    1,    0,    1,
            0,    1,    3,    1,    0,    3,    1,    1,    3,    1,
            3,    3,    5,    1,    1,    1,    1,    1,    1,    1,
            8,    9,    8,    9,    8,    7,    8,    0,    2,    0,
            2,    1,    2,    1,    2,    1,    1,    1,    0,    2,
            0,    2,    0,    2,    2,    1,    3,    1,    4,    1,
            4,    1,    1,    4,    2,    1,    3,    3,    3,    4,
            4,    5,    0,    2,    4,    3,    1,    1,    7,    0,
            2,    1,    3,    3,    4,    1,    4,    0,    2,    5,
            0,    2,    6,    0,    2,    0,    3,    1,    2,    1,
            1,    2,    0,    1,    3,    0,    2,    1,    1,    1,
            1,    1,    1,    1,    1,    7,    9,    6,    1,    2,
            1,    1,    1,    1,    2,    1,    1,    1,    3,    3,
            3,    1,    3,    3,    3,    3,    3,    1,    3,    3,
            1,    1,    2,    1,    1,    0,    1,    0,    2,    2,
            2,    4,    3,    2,    4,    4,    3,    3,    1,    3,
            1,    1,    3,    2,    2,    3,    1,    1,    2,    3,
            1,    1,    2,    3,    1,    1,    3,    2,    0,    1,
            5,    5,    6,   10,    3,    5,    1,    1,    3,    0,
            2,    4,    5,    4,    4,    4,    3,    1,    1,    1,
            1,    1,    1,    0,    1,    1,    2,    1,    1,    1,
            1,    1,    1,    1,    1,    1,    1,    2,    1,    3,
            1,    1,    3,    0,    2,    0,    5,    8,    1,    3,
            3,    0,    2,    2,    2,    3,    1,    0,    1,    1,
            3,    3,    3,    4,    4,    1,    1,    2,    2,    3,
            3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
            3,    3,    2,    2,    2,    2,    3,    3,    3,    3,
            3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
            3,    3,    3,    3,    2,    2,    2,    2,    3,    3,
            3,    3,    3,    3,    3,    3,    3,    3,    3,    5,
            4,    3,    4,    4,    2,    2,    4,    2,    2,    2,
            2,    2,    2,    2,    2,    2,    2,    2,    2,    1,
            3,    2,    1,    2,    4,    2,    2,    8,    9,    8,
            9,    9,   10,    9,   10,    8,    4,    2,    2,    1,
            1,    0,    4,    2,    1,    3,    2,    1,    2,    2,
            2,    4,    1,    2,    1,    1,    1,    1,    1,    1,
            3,    1,    1,    1,    0,    1,    1,    0,    1,    1,
            1,    1,    1,    1,    1,    1,    1,    1,    1,    3,
            5,    3,    3,    4,    1,    1,    3,    1,    1,    1,
            1,    1,    3,    2,    3,    0,    1,    1,    3,    1,
            1,    1,    1,    1,    1,    3,    1,    1,    1,    4,
            4,    1,    4,    4,    0,    1,    1,    1,    3,    3,
            1,    4,    2,    2,    1,    3,    1,    4,    4,    3,
            3,    3,    3,    1,    3,    1,    1,    3,    1,    1,
            4,    1,    1,    1,    3,    1,    1,    2,    1,    3,
            4,    3,    2,    0,    2,    2,    1,    2,    1,    1,
            1,    4,    3,    3,    3,    3,    6,    3,    1,    1,
            2,    1
    );

    protected function initReduceCallbacks(): void {
        $this->reduceCallbacks = [
            0 => null,
            1 => static function ($self, $stackPos) {
                 $self->semValue = $self->handleNamespaces($self->semStack[$stackPos-(1-1)]);
            },
            2 => static function ($self, $stackPos) {
                 if ($self->semStack[$stackPos-(2-2)] !== null) { $self->semStack[$stackPos-(2-1)][] = $self->semStack[$stackPos-(2-2)]; } $self->semValue = $self->semStack[$stackPos-(2-1)];;
            },
            3 => static function ($self, $stackPos) {
                 $self->semValue = array();
            },
            4 => static function ($self, $stackPos) {
                 $nop = $self->maybeCreateZeroLengthNop($self->tokenPos);;
            if ($nop !== null) { $self->semStack[$stackPos-(1-1)][] = $nop; } $self->semValue = $self->semStack[$stackPos-(1-1)];
            },
            5 => null,
            6 => null,
            7 => null,
            8 => null,
            9 => null,
            10 => null,
            11 => null,
            12 => null,
            13 => null,
            14 => null,
            15 => null,
            16 => null,
            17 => null,
            18 => null,
            19 => null,
            20 => null,
            21 => null,
            22 => null,
            23 => null,
            24 => null,
            25 => null,
            26 => null,
            27 => null,
            28 => null,
            29 => null,
            30 => null,
            31 => null,
            32 => null,
            33 => null,
            34 => null,
            35 => null,
            36 => null,
            37 => null,
            38 => null,
            39 => null,
            40 => null,
            41 => null,
            42 => null,
            43 => null,
            44 => null,
            45 => null,
            46 => null,
            47 => null,
            48 => null,
            49 => null,
            50 => null,
            51 => null,
            52 => null,
            53 => null,
            54 => null,
            55 => null,
            56 => null,
            57 => null,
            58 => null,
            59 => null,
            60 => null,
            61 => null,
            62 => null,
            63 => null,
            64 => null,
            65 => null,
            66 => null,
            67 => null,
            68 => null,
            69 => null,
            70 => null,
            71 => null,
            72 => null,
            73 => null,
            74 => null,
            75 => null,
            76 => static function ($self, $stackPos) {
                 $self->semValue = $self->semStack[$stackPos-(1-1)]; if ($self->semValue === "<?=") $self->emitError(new Error('Cannot use "<?=" as an identifier', $self->getAttributes($self->tokenStartStack[$stackPos-(1-1)], $self->tokenEndStack[$stackPos])));
            },
            77 => null,
            78 => null,
            79 => null,
            80 => null,
            81 => null,
            82 => null,
            83 => null,
            84 => null,
            85 => static function ($self, $stackPos) {
                 $self->semValue = new Node\Identifier($self->semStack[$stackPos-(1-1)], $self->getAttributes($self->tokenStartStack[$stackPos-(1-1)], $self->tokenEndStack[$stackPos]));
            },
            86 => static function ($self, $stackPos) {
                 $self->semValue = new Node\Identifier($self->semStack[$stackPos-(1-1)], $self->getAttributes($self->tokenStartStack[$stackPos-(1-1)], $self->tokenEndStack[$stackPos]));
            },
            87 => static function ($self, $stackPos) {
                 $self->semValue = new Node\Identifier($self->semStack[$stackPos-(1-1)], $self->getAttributes($self->tokenStartStack[$stackPos-(1-1)], $self->tokenEndStack[$stackPos]));
            },
            88 => static function ($self, $stackPos) {
                 $self->semValue = new Node\Identifier($self->semStack[$stackPos-(1-1)], $self->getAttributes($self->tokenStartStack[$stackPos-(1-1)], $self->tokenEndStack[$stackPos]));
            },
            89 => static function ($self, $stackPos) {
                 $self->semValue = new Name($self->semStack[$stackPos-(1-1)], $self->getAttributes($self->tokenStartStack[$stackPos-(1-1)], $self->tokenEndStack[$stackPos]));
            },
            90 => static function ($self, $stackPos) {
                 $self->semValue = new Name($self->semStack[$stackPos-(1-1)], $self->getAttributes($self->tokenStartStack[$stackPos-(1-1)], $self->tokenEndStack[$stackPos]));
            },
            91 => static function ($self, $stackPos) {
                 $self->semValue = new Name($self->semStack[$stackPos-(1-1)], $self->getAttributes($self->tokenStartStack[$stackPos-(1-1)], $self->tokenEndStack[$stackPos]));
            },
            92 => static function ($self, $stackPos) {
                 $self->semValue = new Name($self->semStack[$stackPos-(1-1)], $self->getAttributes($self->tokenStartStack[$stackPos-(1-1)], $self->tokenEndStack[$stackPos]));
            },
            93 => static function ($self, $stackPos) {
                 $self->semValue = new Name($self->semStack[$stackPos-(1-1)], $self->getAttributes($self->tokenStartStack[$stackPos-(1-1)], $self->tokenEndStack[$stackPos]));
            },
            94 => null,
            95 => static function ($self, $stackPos) {
                 $self->semValue = new Name(substr($self->semStack[$stackPos-(1-1)], 1), $self->getAttributes($self->tokenStartStack[$stackPos-(1-1)], $self->tokenEndStack[$stackPos]));
            },
            96 => static function ($self, $stackPos) {
                 $self->semValue = new Expr\Variable(substr($self->semStack[$stackPos-(1-1)], 1), $self->getAttributes($self->tokenStartStack[$stackPos-(1-1)], $self->tokenEndStack[$stackPos]));
            },
            97 => static function ($self, $stackPos) {
                 /* nothing */
            },
            98 => static function ($self, $stackPos) {
                 /* nothing */
            },
            99 => static function ($self, $stackPos) {
                 /* nothing */
            },
            100 => static function ($self, $stackPos) {
                 $self->emitError(new Error('A trailing comma is not allowed here', $self->getAttributes($self->tokenStartStack[$stackPos-(1-1)], $self->tokenEndStack[$stackPos])));
            },
            101 => null,
            102 => null,
            103 => static function ($self, $stackPos) {
                 $self->semValue = new Node\Attribute($self->semStack[$stackPos-(1-1)], [], $self->getAttributes($self->tokenStartStack[$stackPos-(1-1)], $self->tokenEndStack[$stackPos]));
            },
            104 => static function ($self, $stackPos) {
                 $self->semValue = new Node\Attribute($self->semStack[$stackPos-(2-1)], $self->semStack[$stackPos-(2-2)], $self->getAttributes($self->tokenStartStack[$stackPos-(2-1)], $self->tokenEndStack[$stackPos]));
            },
            105 => static function ($self, $stackPos) {
                 $self->semValue = array($self->semStack[$stackPos-(1-1)]);
            },
            106 => static function ($self, $stackPos) {
                 $self->semStack[$stackPos-(3-1)][] = $self->semStack[$stackPos-(3-3)]; $self->semValue = $self->semStack[$stackPos-(3-1)];
            },
            107 => static function ($self, $stackPos) {
                 $self->semValue = new Node\AttributeGroup($self->semStack[$stackPos-(4-2)], $self->getAttributes($self->tokenStartStack[$stackPos-(4-1)], $self->tokenEndStack[$stackPos]));
            },
            108 => static function ($self, $stackPos) {
                 $self->semValue = array($self->semStack[$stackPos-(1-1)]);
            },
            109 => static function ($self, $stackPos) {
                 $self->semStack[$stackPos-(2-1)][] = $self->semStack[$stackPos-(2-2)]; $self->semValue = $self->semStack[$stackPos-(2-1)];
            },
            110 => static function ($self, $stackPos) {
                 $self->semValue = [];
            },
            111 => null,
            112 => null,
            113 => null,
            114 => null,
            115 => static function ($self, $stackPos) {
                 $self->semValue = new Stmt\HaltCompiler($self->handleHaltCompiler(), $self->getAttributes($self->tokenStartStack[$stackPos-(4-1)], $self->tokenEndStack[$stackPos]));
            },
            116 => static function ($self, $stackPos) {
                 $self->semValue = new Stmt\Namespace_($self->semStack[$stackPos-(3-2)], null, $self->getAttributes($self->tokenStartStack[$stackPos-(3-1)], $self->tokenEndStack[$stackPos]));
            $self->semValue->setAttribute('kind', Stmt\Namespace_::KIND_SEMICOLON);
            $self->checkNamespace($self->semValue);
            },
            117 => static function ($self, $stackPos) {
                 $self->semValue = new Stmt\Namespace_($self->semStack[$stackPos-(5-2)], $self->semStack[$stackPos-(5-4)], $self->getAttributes($self->tokenStartStack[$stackPos-(5-1)], $self->tokenEndStack[$stackPos]));
            $self->semValue->setAttribute('kind', Stmt\Namespace_::KIND_BRACED);
            $self->checkNamespace($self->semValue);
            },
            118 => static function ($self, $stackPos) {
                 $self->semValue = new Stmt\Namespace_(null, $self->semStack[$stackPos-(4-3)], $self->getAttributes($self->tokenStartStack[$stackPos-(4-1)], $self->tokenEndStack[$stackPos]));
            $self->semValue->setAttribute('kind', Stmt\Namespace_::KIND_BRACED);
            $self->checkNamespace($self->semValue);
            },
            119 => static function ($self, $stackPos) {
                 $self->semValue = new Stmt\Use_($self->semStack[$stackPos-(3-2)], Stmt\Use_::TYPE_NORMAL, $self->getAttributes($self->tokenStartStack[$stackPos-(3-1)], $self->tokenEndStack[$stackPos]));
            },
            120 => static function ($self, $stackPos) {
                 $self->semValue = new Stmt\Use_($self->semStack[$stackPos-(4-3)], $self->semStack[$stackPos-(4-2)], $self->getAttributes($self->tokenStartStack[$stackPos-(4-1)], $self->tokenEndStack[$stackPos]));
            },
            121 => null,
            122 => static function ($self, $stackPos) {
                 $self->semValue = new Stmt\Const_($self->semStack[$stackPos-(3-2)], $self->getAttributes($self->tokenStartStack[$stackPos-(3-1)], $self->tokenEndStack[$stackPos]), []);
            },
            123 => static function ($self, $stackPos) {
                 $self->semValue = new Stmt\Const_($self->semStack[$stackPos-(4-3)], $self->getAttributes($self->tokenStartStack[$stackPos-(4-1)], $self->tokenEndStack[$stackPos]), $self->semStack[$stackPos-(4-1)]);
            $self->checkConstantAttributes($self->semValue);
            },
            124 => static function ($self, $stackPos) {
                 $self->semValue = Stmt\Use_::TYPE_FUNCTION;
            },
            125 => static function ($self, $stackPos) {
                 $self->semValue = Stmt\Use_::TYPE_CONSTANT;
            },
            126 => static function ($self, $stackPos) {
                 $self->semValue = new Stmt\GroupUse($self->semStack[$stackPos-(8-3)], $self->semStack[$stackPos-(8-6)], $self->semStack[$stackPos-(8-2)], $self->getAttributes($self->tokenStartStack[$stackPos-(8-1)], $self->tokenEndStack[$stackPos]));
            },
            127 => static function ($self, $stackPos) {
                 $self->semValue = new Stmt\GroupUse($self->semStack[$stackPos-(7-2)], $self->semStack[$stackPos-(7-5)], Stmt\Use_::TYPE_UNKNOWN, $self->getAttributes($self->tokenStartStack[$stackPos-(7-1)], $self->tokenEndStack[$stackPos]));
            },
            128 => null,
            129 => static function ($self, $stackPos) {
                 $self->semStack[$stackPos-(3-1)][] = $self->semStack[$stackPos-(3-3)]; $self->semValue = $self->semStack[$stackPos-(3-1)];
            },
            130 => static function ($self, $stackPos) {
                 $self->semValue = array($self->semStack[$stackPos-(1-1)]);
            },
            131 => null,
            132 => static function ($self, $stackPos) {
                 $self->semStack[$stackPos-(3-1)][] = $self->semStack[$stackPos-(3-3)]; $self->semValue = $self->semStack[$stackPos-(3-1)];
            },
            133 => static function ($self, $stackPos) {
                 $self->semValue = array($self->semStack[$stackPos-(1-1)]);
            },
            134 => null,
            135 => static function ($self, $stackPos) {
                 $self->semStack[$stackPos-(3-1)][] = $self->semStack[$stackPos-(3-3)]; $self->semValue = $self->semStack[$stackPos-(3-1)];
            },
            136 => static function ($self, $stackPos) {
                 $self->semValue = array($self->semStack[$stackPos-(1-1)]);
            },
            137 => static function ($self, $stackPos) {
                 $self->semValue = new Node\UseItem($self->semStack[$stackPos-(1-1)], null, Stmt\Use_::TYPE_UNKNOWN, $self->getAttributes($self->tokenStartStack[$stackPos-(1-1)], $self->tokenEndStack[$stackPos])); $self->checkUseUse($self->semValue, $stackPos-(1-1));
            },
            138 => static function ($self, $stackPos) {
                 $self->semValue = new Node\UseItem($self->semStack[$stackPos-(3-1)], $self->semStack[$stackPos-(3-3)], Stmt\Use_::TYPE_UNKNOWN, $self->getAttributes($self->tokenStartStack[$stackPos-(3-1)], $self->tokenEndStack[$stackPos])); $self->checkUseUse($self->semValue, $stackPos-(3-3));
            },
            139 => static function ($self, $stackPos) {
                 $self->semValue = new Node\UseItem($self->semStack[$stackPos-(1-1)], null, Stmt\Use_::TYPE_UNKNOWN, $self->getAttributes($self->tokenStartStack[$stackPos-(1-1)], $self->tokenEndStack[$stackPos])); $self->checkUseUse($self->semValue, $stackPos-(1-1));
            },
            140 => static function ($self, $stackPos) {
                 $self->semValue = new Node\UseItem($self->semStack[$stackPos-(3-1)], $self->semStack[$stackPos-(3-3)], Stmt\Use_::TYPE_UNKNOWN, $self->getAttributes($self->tokenStartStack[$stackPos-(3-1)], $self->tokenEndStack[$stackPos])); $self->checkUseUse($self->semValue, $stackPos-(3-3));
            },
            141 => static function ($self, $stackPos) {
                 $self->semValue = $self->semStack[$stackPos-(1-1)]; $self->semValue->type = Stmt\Use_::TYPE_NORMAL;
            },
            142 => static function ($self, $stackPos) {
                 $self->semValue = $self->semStack[$stackPos-(2-2)]; $self->semValue->type = $self->semStack[$stackPos-(2-1)];
            },
            143 => null,
            144 => static function ($self, $stackPos) {
                 $self->semStack[$stackPos-(3-1)][] = $self->semStack[$stackPos-(3-3)]; $self->semValue = $self->semStack[$stackPos-(3-1)];
            },
            145 => static function ($self, $stackPos) {
                 $self->semValue = array($self->semStack[$stackPos-(1-1)]);
            },
            146 => static function ($self, $stackPos) {
                 $self->semValue = new Node\Const_($self->semStack[$stackPos-(3-1)], $self->semStack[$stackPos-(3-3)], $self->getAttributes($self->tokenStartStack[$stackPos-(3-1)], $self->tokenEndStack[$stackPos]));
            },
            147 => null,
            148 => static function ($self, $stackPos) {
                 $self->semStack[$stackPos-(3-1)][] = $self->semStack[$stackPos-(3-3)]; $self->semValue = $self->semStack[$stackPos-(3-1)];
            },
            149 => static function ($self, $stackPos) {
                 $self->semValue = array($self->semStack[$stackPos-(1-1)]);
            },
            150 => static function ($self, $stackPos) {
                 $self->semValue = new Node\Const_(new Node\Identifier($self->semStack[$stackPos-(3-1)], $self->getAttributes($self->tokenStartStack[$stackPos-(3-1)],  $self->tokenEndStack[$stackPos-(3-1)])), $self->semStack[$stackPos-(3-3)], $self->getAttributes($self->tokenStartStack[$stackPos-(3-1)], $self->tokenEndStack[$stackPos]));
            },
            151 => static function ($self, $stackPos) {
                 $self->semValue = new Node\Const_(new Node\Identifier($self->semStack[$stackPos-(3-1)], $self->getAttributes($self->tokenStartStack[$stackPos-(3-1)],  $self->tokenEndStack[$stackPos-(3-1)])), $self->semStack[$stackPos-(3-3)], $self->getAttributes($self->tokenStartStack[$stackPos-(3-1)], $self->tokenEndStack[$stackPos]));
            },
            152 => static function ($self, $stackPos) {
                 if ($self->semStack[$stackPos-(2-2)] !== null) { $self->semStack[$stackPos-(2-1)][] = $self->semStack[$stackPos-(2-2)]; } $self->semValue = $self->semStack[$stackPos-(2-1)];;
            },
            153 => static function ($self, $stackPos) {
                 $self->semValue = array();
            },
            154 => static function ($self, $stackPos) {
                 $nop = $self->maybeCreateZeroLengthNop($self->tokenPos);;
            if ($nop !== null) { $self->semStack[$stackPos-(1-1)][] = $nop; } $self->semValue = $self->semStack[$stackPos-(1-1)];
            },
            155 => null,
            156 => null,
            157 => null,
            158 => static function ($self, $stackPos) {
                 throw new Error('__HALT_COMPILER() can only be used from the outermost scope', $self->getAttributes($self->tokenStartStack[$stackPos-(1-1)], $self->tokenEndStack[$stackPos]));
            },
            159 => static function ($self, $stackPos) {
                 $self->semValue = new Stmt\Block($self->semStack[$stackPos-(3-2)], $self->getAttributes($self->tokenStartStack[$stackPos-(3-1)], $self->tokenEndStack[$stackPos]));
            },
            160 => static function ($self, $stackPos) {
                 $self->semValue = new Stmt\If_($self->semStack[$stackPos-(7-3)], ['stmts' => $self->semStack[$stackPos-(7-5)], 'elseifs' => $self->semStack[$stackPos-(7-6)], 'else' => $self->semStack[$stackPos-(7-7)]], $self->getAttributes($self->tokenStartStack[$stackPos-(7-1)], $self->tokenEndStack[$stackPos]));
            },
            161 => static function ($self, $stackPos) {
                 $self->semValue = new Stmt\If_($self->semStack[$stackPos-(10-3)], ['stmts' => $self->semStack[$stackPos-(10-6)], 'elseifs' => $self->semStack[$stackPos-(10-7)], 'else' => $self->semStack[$stackPos-(10-8)]], $self->getAttributes($self->tokenStartStack[$stackPos-(10-1)], $self->tokenEndStack[$stackPos]));
            },
            162 => static function ($self, $stackPos) {
                 $self->semValue = new Stmt\While_($self->semStack[$stackPos-(5-3)], $self->semStack[$stackPos-(5-5)], $self->getAttributes($self->tokenStartStack[$stackPos-(5-1)], $self->tokenEndStack[$stackPos]));
            },
            163 => static function ($self, $stackPos) {
                 $self->semValue = new Stmt\Do_($self->semStack[$stackPos-(7-5)], $self->semStack[$stackPos-(7-2)], $self->getAttributes($self->tokenStartStack[$stackPos-(7-1)], $self->tokenEndStack[$stackPos]));
            },
            164 => static function ($self, $stackPos) {
                 $self->semValue = new Stmt\For_(['init' => $self->semStack[$stackPos-(9-3)], 'cond' => $self->semStack[$stackPos-(9-5)], 'loop' => $self->semStack[$stackPos-(9-7)], 'stmts' => $self->semStack[$stackPos-(9-9)]], $self->getAttributes($self->tokenStartStack[$stackPos-(9-1)], $self->tokenEndStack[$stackPos]));
            },
            165 => static function ($self, $stackPos) {
                 $self->semValue = new Stmt\Switch_($self->semStack[$stackPos-(5-3)], $self->semStack[$stackPos-(5-5)], $self->getAttributes($self->tokenStartStack[$stackPos-(5-1)], $self->tokenEndStack[$stackPos]));
            },
            166 => static function ($self, $stackPos) {
                 $self->semValue = new Stmt\Break_($self->semStack[$stackPos-(3-2)], $self->getAttributes($self->tokenStartStack[$stackPos-(3-1)], $self->tokenEndStack[$stackPos]));
            },
            167 => static function ($self, $stackPos) {
                 $self->semValue = new Stmt\Continue_($self->semStack[$stackPos-(3-2)], $self->getAttributes($self->tokenStartStack[$stackPos-(3-1)], $self->tokenEndStack[$stackPos]));
            },
            168 => static function ($self, $stackPos) {
                 $self->semValue = new Stmt\Return_($self->semStack[$stackPos-(3-2)], $self->getAttributes($self->tokenStartStack[$stackPos-(3-1)], $self->tokenEndStack[$stackPos]));
            },
            169 => static function ($self, $stackPos) {
                 $self->semValue = new Stmt\Global_($self->semStack[$stackPos-(3-2)], $self->getAttributes($self->tokenStartStack[$stackPos-(3-1)], $self->tokenEndStack[$stackPos]));
            },
            170 => static function ($self, $stackPos) {
                 $self->semValue = new Stmt\Static_($self->semStack[$stackPos-(3-2)], $self->getAttributes($self->tokenStartStack[$stackPos-(3-1)], $self->tokenEndStack[$stackPos]));
            },
            171 => static function ($self, $stackPos) {
                 $self->semValue = new Stmt\Echo_($self->semStack[$stackPos-(3-2)], $self->getAttributes($self->tokenStartStack[$stackPos-(3-1)], $self->tokenEndStack[$stackPos]));
            },
            172 => static function ($self, $stackPos) {

        $self->semValue = new Stmt\InlineHTML($self->semStack[$stackPos-(1-1)], $self->getAttributes($self->tokenStartStack[$stackPos-(1-1)], $self->tokenEndStack[$stackPos]));
        $self->semValue->setAttribute('hasLeadingNewline', $self->inlineHtmlHasLeadingNewline($stackPos-(1-1)));

            },
            173 => static function ($self, $stackPos) {
                 $self->semValue = new Stmt\Expression($self->semStack[$stackPos-(2-1)], $self->getAttributes($self->tokenStartStack[$stackPos-(2-1)], $self->tokenEndStack[$stackPos]));
            },
            174 => static function ($self, $stackPos) {
                 $self->semValue = new Stmt\Unset_($self->semStack[$stackPos-(5-3)], $self->getAttributes($self->tokenStartStack[$stackPos-(5-1)], $self->tokenEndStack[$stackPos]));
            },
            175 => static function ($self, $stackPos) {
                 $self->semValue = new Stmt\Foreach_($self->semStack[$stackPos-(7-3)], $self->semStack[$stackPos-(7-5)][0], ['keyVar' => null, 'byRef' => $self->semStack[$stackPos-(7-5)][1], 'stmts' => $self->semStack[$stackPos-(7-7)]], $self->getAttributes($self->tokenStartStack[$stackPos-(7-1)], $self->tokenEndStack[$stackPos]));
            },
            176 => static function ($self, $stackPos) {
                 $self->semValue = new Stmt\Foreach_($self->semStack[$stackPos-(9-3)], $self->semStack[$stackPos-(9-7)][0], ['keyVar' => $self->semStack[$stackPos-(9-5)], 'byRef' => $self->semStack[$stackPos-(9-7)][1], 'stmts' => $self->semStack[$stackPos-(9-9)]], $self->getAttributes($self->tokenStartStack[$stackPos-(9-1)], $self->tokenEndStack[$stackPos]));
            },
            177 => static function ($self, $stackPos) {
                 $self->semValue = new Stmt\Foreach_($self->semStack[$stackPos-(6-3)], new Expr\Error($self->getAttributes($self->tokenStartStack[$stackPos-(6-4)],  $self->tokenEndStack[$stackPos-(6-4)])), ['stmts' => $self->semStack[$stackPos-(6-6)]], $self->getAttributes($self->tokenStartStack[$stackPos-(6-1)], $self->tokenEndStack[$stackPos]));
            },
            178 => static function ($self, $stackPos) {
                 $self->semValue = new Stmt\Declare_($self->semStack[$stackPos-(5-3)], $self->semStack[$stackPos-(5-5)], $self->getAttributes($self->tokenStartStack[$stackPos-(5-1)], $self->tokenEndStack[$stackPos]));
            },
            179 => static function ($self, $stackPos) {
                 $self->semValue = new Stmt\TryCatch($self->semStack[$stackPos-(6-3)], $self->semStack[$stackPos-(6-5)], $self->semStack[$stackPos-(6-6)], $self->getAttributes($self->tokenStartStack[$stackPos-(6-1)], $self->tokenEndStack[$stackPos])); $self->checkTryCatch($self->semValue);
            },
            180 => static function ($self, $stackPos) {
                 $self->semValue = new Stmt\Goto_($self->semStack[$stackPos-(3-2)], $self->getAttributes($self->tokenStartStack[$stackPos-(3-1)], $self->tokenEndStack[$stackPos]));
            },
            181 => static function ($self, $stackPos) {
                 $self->semValue = new Stmt\Label($self->semStack[$stackPos-(2-1)], $self->getAttributes($self->tokenStartStack[$stackPos-(2-1)], $self->tokenEndStack[$stackPos]));
            },
            182 => static function ($self, $stackPos) {
                 $self->semValue = null; /* means: no statement */
            },
            183 => null,
            184 => static function ($self, $stackPos) {
                 $self->semValue = $self->maybeCreateNop($self->tokenStartStack[$stackPos-(1-1)], $self->tokenEndStack[$stackPos]);
            },
            185 => static function ($self, $stackPos) {
                 if ($self->semStack[$stackPos-(1-1)] instanceof Stmt\Block) { $self->semValue = $self->semStack[$stackPos-(1-1)]->stmts; } else if ($self->semStack[$stackPos-(1-1)] === null) { $self->semValue = []; } else { $self->semValue = [$self->semStack[$stackPos-(1-1)]]; };
            },
            186 => static function ($self, $stackPos) {
                 $self->semValue = array();
            },
            187 => static function ($self, $stackPos) {
                 $self->semStack[$stackPos-(2-1)][] = $self->semStack[$stackPos-(2-2)]; $self->semValue = $self->semStack[$stackPos-(2-1)];
            },
            188 => static function ($self, $stackPos) {
                 $self->semValue = array($self->semStack[$stackPos-(1-1)]);
            },
            189 => static function ($self, $stackPos) {
                 $self->semStack[$stackPos-(3-1)][] = $self->semStack[$stackPos-(3-3)]; $self->semValue = $self->semStack[$stackPos-(3-1)];
            },
            190 => static function ($self, $stackPos) {
                 $self->semValue = new Stmt\Catch_($self->semStack[$stackPos-(8-3)], $self->semStack[$stackPos-(8-4)], $self->semStack[$stackPos-(8-7)], $self->getAttributes($self->tokenStartStack[$stackPos-(8-1)], $self->tokenEndStack[$stackPos]));
            },
            191 => static function ($self, $stackPos) {
                 $self->semValue = null;
            },
            192 => static function ($self, $stackPos) {
                 $self->semValue = new Stmt\Finally_($self->semStack[$stackPos-(4-3)], $self->getAttributes($self->tokenStartStack[$stackPos-(4-1)], $self->tokenEndStack[$stackPos]));
            },
            193 => null,
            194 => static function ($self, $stackPos) {
                 $self->semValue = array($self->semStack[$stackPos-(1-1)]);
            },
            195 => static function ($self, $stackPos) {
                 $self->semStack[$stackPos-(3-1)][] = $self->semStack[$stackPos-(3-3)]; $self->semValue = $self->semStack[$stackPos-(3-1)];
            },
            196 => static function ($self, $stackPos) {
                 $self->semValue = false;
            },
            197 => static function ($self, $stackPos) {
                 $self->semValue = true;
            },
            198 => static function ($self, $stackPos) {
                 $self->semValue = false;
            },
            199 => static function ($self, $stackPos) {
                 $self->semValue = true;
            },
            200 => static function ($self, $stackPos) {
                 $self->semValue = false;
            },
            201 => static function ($self, $stackPos) {
                 $self->semValue = true;
            },
            202 => static function ($self, $stackPos) {
                 $self->semValue = $self->semStack[$stackPos-(3-2)];
            },
            203 => static function ($self, $stackPos) {
                 $self->semValue = [];
            },
            204 => static function ($self, $stackPos) {
                 $self->semValue = NULL;
            },
            205 => static function ($self, $stackPos) {
                 $self->semValue = $self->semStack[$stackPos-(3-2)];
            },
            206 => static function ($self, $stackPos) {
                 $self->semValue = [];
            },
            207 => static function ($self, $stackPos) {
                 $self->semValue = array($self->semStack[$stackPos-(1-1)]);
            },
            208 => static function ($self, $stackPos) {
                 $self->semStack[$stackPos-(3-1)][] = $self->semStack[$stackPos-(3-3)]; $self->semValue = $self->semStack[$stackPos-(3-1)];
            },
            209 => static function ($self, $stackPos) {
                 $self->semValue = new Node\GenericParameter($self->handleBuiltinTypes($self->semStack[$stackPos-(1-1)]), $self->getAttributes($self->tokenStartStack[$stackPos-(1-1)], $self->tokenEndStack[$stackPos]));
            },
            210 => static function ($self, $stackPos) {
                 $self->semValue = new Node\GenericParameter($self->handleBuiltinTypes($self->semStack[$stackPos-(3-1)]), $self->getAttributes($self->tokenStartStack[$stackPos-(3-1)], $self->tokenEndStack[$stackPos])); $self->semValue->setConstraint($self->handleBuiltinTypes($self->semStack[$stackPos-(3-3)]));
            },
            211 => static function ($self, $stackPos) {
                 $self->semValue = new Node\GenericParameter($self->handleBuiltinTypes($self->semStack[$stackPos-(3-1)]), $self->getAttributes($self->tokenStartStack[$stackPos-(3-1)], $self->tokenEndStack[$stackPos])); $self->semValue->setDefault($self->handleBuiltinTypes($self->semStack[$stackPos-(3-3)]));
            },
            212 => static function ($self, $stackPos) {
                 $self->semValue = new Node\GenericParameter($self->handleBuiltinTypes($self->semStack[$stackPos-(5-1)]), $self->getAttributes($self->tokenStartStack[$stackPos-(5-1)], $self->tokenEndStack[$stackPos])); $self->semValue->setConstraint($self->handleBuiltinTypes($self->semStack[$stackPos-(5-3)])); $self->semValue->setDefault($self->handleBuiltinTypes($self->semStack[$stackPos-(5-5)]));
            },
            213 => static function ($self, $stackPos) {
                 $self->semValue = new Node\Name($self->semStack[$stackPos-(1-1)], $self->getAttributes($self->tokenStartStack[$stackPos-(1-1)], $self->tokenEndStack[$stackPos]));
            },
            214 => static function ($self, $stackPos) {
                 $self->semValue = new Node\Name($self->semStack[$stackPos-(1-1)], $self->getAttributes($self->tokenStartStack[$stackPos-(1-1)], $self->tokenEndStack[$stackPos]));
            },
            215 => static function ($self, $stackPos) {
                 $self->semValue = new Node\Name($self->semStack[$stackPos-(1-1)], $self->getAttributes($self->tokenStartStack[$stackPos-(1-1)], $self->tokenEndStack[$stackPos]));
            },
            216 => null,
            217 => static function ($self, $stackPos) {
                 $self->semValue = new Node\Identifier($self->semStack[$stackPos-(1-1)], $self->getAttributes($self->tokenStartStack[$stackPos-(1-1)], $self->tokenEndStack[$stackPos]));
            },
            218 => static function ($self, $stackPos) {
                 $self->semValue = new Node\Identifier($self->semStack[$stackPos-(1-1)], $self->getAttributes($self->tokenStartStack[$stackPos-(1-1)], $self->tokenEndStack[$stackPos]));
            },
            219 => static function ($self, $stackPos) {
                 $self->semValue = new Node\Identifier($self->semStack[$stackPos-(1-1)], $self->getAttributes($self->tokenStartStack[$stackPos-(1-1)], $self->tokenEndStack[$stackPos]));
            },
            220 => static function ($self, $stackPos) {
                 $self->semValue = new Stmt\Function_($self->semStack[$stackPos-(8-3)], ['byRef' => $self->semStack[$stackPos-(8-2)], 'params' => $self->semStack[$stackPos-(8-5)], 'returnType' => $self->semStack[$stackPos-(8-7)], 'stmts' => $self->semStack[$stackPos-(8-8)], 'attrGroups' => []], $self->getAttributes($self->tokenStartStack[$stackPos-(8-1)], $self->tokenEndStack[$stackPos]));
            },
            221 => static function ($self, $stackPos) {
                 $self->semValue = new Stmt\Function_($self->semStack[$stackPos-(9-4)], ['byRef' => $self->semStack[$stackPos-(9-3)], 'params' => $self->semStack[$stackPos-(9-6)], 'returnType' => $self->semStack[$stackPos-(9-8)], 'stmts' => $self->semStack[$stackPos-(9-9)], 'attrGroups' => $self->semStack[$stackPos-(9-1)]], $self->getAttributes($self->tokenStartStack[$stackPos-(9-1)], $self->tokenEndStack[$stackPos]));
            },
            222 => static function ($self, $stackPos) {
                 $self->semValue = new Stmt\Class_($self->semStack[$stackPos-(8-2)], ['type' => $self->semStack[$stackPos-(8-1)], 'extends' => $self->semStack[$stackPos-(8-4)], 'implements' => $self->semStack[$stackPos-(8-5)], 'stmts' => $self->semStack[$stackPos-(8-7)], 'attrGroups' => []], ['generics' => $self->semStack[$stackPos-(8-3)] ], $self->getAttributes($self->tokenStartStack[$stackPos-(8-1)], $self->tokenEndStack[$stackPos]));
            $self->checkClass($self->semValue, $stackPos-(8-2));
            },
            223 => static function ($self, $stackPos) {
                 $self->semValue = new Stmt\Class_($self->semStack[$stackPos-(9-3)], ['type' => $self->semStack[$stackPos-(9-2)], 'extends' => $self->semStack[$stackPos-(9-5)], 'implements' => $self->semStack[$stackPos-(9-6)], 'stmts' => $self->semStack[$stackPos-(9-8)], 'attrGroups' => $self->semStack[$stackPos-(9-1)]], ['generics' => $self->semStack[$stackPos-(9-4)] ], $self->getAttributes($self->tokenStartStack[$stackPos-(9-1)], $self->tokenEndStack[$stackPos]));
            $self->checkClass($self->semValue, $stackPos-(9-3));
            },
            224 => static function ($self, $stackPos) {
                 $self->semValue = new Stmt\Interface_($self->semStack[$stackPos-(8-3)], ['extends' => $self->semStack[$stackPos-(8-5)], 'stmts' => $self->semStack[$stackPos-(8-7)], 'attrGroups' => $self->semStack[$stackPos-(8-1)]], ['generics' => $self->semStack[$stackPos-(8-4)] ], $self->getAttributes($self->tokenStartStack[$stackPos-(8-1)], $self->tokenEndStack[$stackPos]));
            $self->checkInterface($self->semValue, $stackPos-(8-3));
            },
            225 => static function ($self, $stackPos) {
                 $self->semValue = new Stmt\Trait_($self->semStack[$stackPos-(7-3)], ['stmts' => $self->semStack[$stackPos-(7-6)], 'attrGroups' => $self->semStack[$stackPos-(7-1)]], ['generics' => $self->semStack[$stackPos-(7-4)] ], $self->getAttributes($self->tokenStartStack[$stackPos-(7-1)], $self->tokenEndStack[$stackPos]));
            },
            226 => static function ($self, $stackPos) {
                 $self->semValue = new Stmt\Enum_($self->semStack[$stackPos-(8-3)], ['scalarType' => $self->semStack[$stackPos-(8-4)], 'implements' => $self->semStack[$stackPos-(8-5)], 'stmts' => $self->semStack[$stackPos-(8-7)], 'attrGroups' => $self->semStack[$stackPos-(8-1)]], $self->getAttributes($self->tokenStartStack[$stackPos-(8-1)], $self->tokenEndStack[$stackPos]));
            $self->checkEnum($self->semValue, $stackPos-(8-3));
            },
            227 => static function ($self, $stackPos) {
                 $self->semValue = null;
            },
            228 => static function ($self, $stackPos) {
                 $self->semValue = $self->semStack[$stackPos-(2-2)];
            },
            229 => static function ($self, $stackPos) {
                 $self->semValue = null;
            },
            230 => static function ($self, $stackPos) {
                 $self->semValue = $self->semStack[$stackPos-(2-2)];
            },
            231 => static function ($self, $stackPos) {
                 $self->semValue = 0;
            },
            232 => null,
            233 => null,
            234 => static function ($self, $stackPos) {
                 $self->checkClassModifier($self->semStack[$stackPos-(2-1)], $self->semStack[$stackPos-(2-2)], $stackPos-(2-2)); $self->semValue = $self->semStack[$stackPos-(2-1)] | $self->semStack[$stackPos-(2-2)];
            },
            235 => static function ($self, $stackPos) {
                 $self->semValue = Modifiers::ABSTRACT;
            },
            236 => static function ($self, $stackPos) {
                 $self->semValue = Modifiers::FINAL;
            },
            237 => static function ($self, $stackPos) {
                 $self->semValue = Modifiers::READONLY;
            },
            238 => static function ($self, $stackPos) {
                 $self->semValue = null;
            },
            239 => static function ($self, $stackPos) {
                 $self->semValue = $self->semStack[$stackPos-(2-2)];
            },
            240 => static function ($self, $stackPos) {
                 $self->semValue = array();
            },
            241 => static function ($self, $stackPos) {
                 $self->semValue = $self->semStack[$stackPos-(2-2)];
            },
            242 => static function ($self, $stackPos) {
                 $self->semValue = array();
            },
            243 => static function ($self, $stackPos) {
                 $self->semValue = $self->semStack[$stackPos-(2-2)];
            },
            244 => null,
            245 => static function ($self, $stackPos) {
                 $self->semValue = array($self->semStack[$stackPos-(1-1)]);
            },
            246 => static function ($self, $stackPos) {
                 $self->semStack[$stackPos-(3-1)][] = $self->semStack[$stackPos-(3-3)]; $self->semValue = $self->semStack[$stackPos-(3-1)];
            },
            247 => null,
            248 => static function ($self, $stackPos) {
                 $self->semValue = $self->semStack[$stackPos-(4-2)];
            },
            249 => null,
            250 => static function ($self, $stackPos) {
                 $self->semValue = $self->semStack[$stackPos-(4-2)];
            },
            251 => static function ($self, $stackPos) {
                 if ($self->semStack[$stackPos-(1-1)] instanceof Stmt\Block) { $self->semValue = $self->semStack[$stackPos-(1-1)]->stmts; } else if ($self->semStack[$stackPos-(1-1)] === null) { $self->semValue = []; } else { $self->semValue = [$self->semStack[$stackPos-(1-1)]]; };
            },
            252 => static function ($self, $stackPos) {
                 $self->semValue = null;
            },
            253 => static function ($self, $stackPos) {
                 $self->semValue = $self->semStack[$stackPos-(4-2)];
            },
            254 => null,
            255 => static function ($self, $stackPos) {
                 $self->semValue = array($self->semStack[$stackPos-(1-1)]);
            },
            256 => static function ($self, $stackPos) {
                 $self->semStack[$stackPos-(3-1)][] = $self->semStack[$stackPos-(3-3)]; $self->semValue = $self->semStack[$stackPos-(3-1)];
            },
            257 => static function ($self, $stackPos) {
                 $self->semValue = new Node\DeclareItem($self->semStack[$stackPos-(3-1)], $self->semStack[$stackPos-(3-3)], $self->getAttributes($self->tokenStartStack[$stackPos-(3-1)], $self->tokenEndStack[$stackPos]));
            },
            258 => static function ($self, $stackPos) {
                 $self->semValue = $self->semStack[$stackPos-(3-2)];
            },
            259 => static function ($self, $stackPos) {
                 $self->semValue = $self->semStack[$stackPos-(4-3)];
            },
            260 => static function ($self, $stackPos) {
                 $self->semValue = $self->semStack[$stackPos-(4-2)];
            },
            261 => static function ($self, $stackPos) {
                 $self->semValue = $self->semStack[$stackPos-(5-3)];
            },
            262 => static function ($self, $stackPos) {
                 $self->semValue = array();
            },
            263 => static function ($self, $stackPos) {
                 $self->semStack[$stackPos-(2-1)][] = $self->semStack[$stackPos-(2-2)]; $self->semValue = $self->semStack[$stackPos-(2-1)];
            },
            264 => static function ($self, $stackPos) {
                 $self->semValue = new Stmt\Case_($self->semStack[$stackPos-(4-2)], $self->semStack[$stackPos-(4-4)], $self->getAttributes($self->tokenStartStack[$stackPos-(4-1)], $self->tokenEndStack[$stackPos]));
            },
            265 => static function ($self, $stackPos) {
                 $self->semValue = new Stmt\Case_(null, $self->semStack[$stackPos-(3-3)], $self->getAttributes($self->tokenStartStack[$stackPos-(3-1)], $self->tokenEndStack[$stackPos]));
            },
            266 => null,
            267 => null,
            268 => static function ($self, $stackPos) {
                 $self->semValue = new Expr\Match_($self->semStack[$stackPos-(7-3)], $self->semStack[$stackPos-(7-6)], $self->getAttributes($self->tokenStartStack[$stackPos-(7-1)], $self->tokenEndStack[$stackPos]));
            },
            269 => static function ($self, $stackPos) {
                 $self->semValue = [];
            },
            270 => null,
            271 => static function ($self, $stackPos) {
                 $self->semValue = array($self->semStack[$stackPos-(1-1)]);
            },
            272 => static function ($self, $stackPos) {
                 $self->semStack[$stackPos-(3-1)][] = $self->semStack[$stackPos-(3-3)]; $self->semValue = $self->semStack[$stackPos-(3-1)];
            },
            273 => static function ($self, $stackPos) {
                 $self->semValue = new Node\MatchArm($self->semStack[$stackPos-(3-1)], $self->semStack[$stackPos-(3-3)], $self->getAttributes($self->tokenStartStack[$stackPos-(3-1)], $self->tokenEndStack[$stackPos]));
            },
            274 => static function ($self, $stackPos) {
                 $self->semValue = new Node\MatchArm(null, $self->semStack[$stackPos-(4-4)], $self->getAttributes($self->tokenStartStack[$stackPos-(4-1)], $self->tokenEndStack[$stackPos]));
            },
            275 => static function ($self, $stackPos) {
                 $self->semValue = $self->semStack[$stackPos-(1-1)];
            },
            276 => static function ($self, $stackPos) {
                 $self->semValue = $self->semStack[$stackPos-(4-2)];
            },
            277 => static function ($self, $stackPos) {
                 $self->semValue = array();
            },
            278 => static function ($self, $stackPos) {
                 $self->semStack[$stackPos-(2-1)][] = $self->semStack[$stackPos-(2-2)]; $self->semValue = $self->semStack[$stackPos-(2-1)];
            },
            279 => static function ($self, $stackPos) {
                 $self->semValue = new Stmt\ElseIf_($self->semStack[$stackPos-(5-3)], $self->semStack[$stackPos-(5-5)], $self->getAttributes($self->tokenStartStack[$stackPos-(5-1)], $self->tokenEndStack[$stackPos]));
            },
            280 => static function ($self, $stackPos) {
                 $self->semValue = array();
            },
            281 => static function ($self, $stackPos) {
                 $self->semStack[$stackPos-(2-1)][] = $self->semStack[$stackPos-(2-2)]; $self->semValue = $self->semStack[$stackPos-(2-1)];
            },
            282 => static function ($self, $stackPos) {
                 $self->semValue = new Stmt\ElseIf_($self->semStack[$stackPos-(6-3)], $self->semStack[$stackPos-(6-6)], $self->getAttributes($self->tokenStartStack[$stackPos-(6-1)], $self->tokenEndStack[$stackPos])); $self->fixupAlternativeElse($self->semValue);
            },
            283 => static function ($self, $stackPos) {
                 $self->semValue = null;
            },
            284 => static function ($self, $stackPos) {
                 $self->semValue = new Stmt\Else_($self->semStack[$stackPos-(2-2)], $self->getAttributes($self->tokenStartStack[$stackPos-(2-1)], $self->tokenEndStack[$stackPos]));
            },
            285 => static function ($self, $stackPos) {
                 $self->semValue = null;
            },
            286 => static function ($self, $stackPos) {
                 $self->semValue = new Stmt\Else_($self->semStack[$stackPos-(3-3)], $self->getAttributes($self->tokenStartStack[$stackPos-(3-1)], $self->tokenEndStack[$stackPos])); $self->fixupAlternativeElse($self->semValue);
            },
            287 => static function ($self, $stackPos) {
                 $self->semValue = array($self->semStack[$stackPos-(1-1)], false);
            },
            288 => static function ($self, $stackPos) {
                 $self->semValue = array($self->semStack[$stackPos-(2-2)], true);
            },
            289 => static function ($self, $stackPos) {
                 $self->semValue = array($self->semStack[$stackPos-(1-1)], false);
            },
            290 => static function ($self, $stackPos) {
                 $self->semValue = array($self->fixupArrayDestructuring($self->semStack[$stackPos-(1-1)]), false);
            },
            291 => null,
            292 => static function ($self, $stackPos) {
                 $self->semValue = array();
            },
            293 => static function ($self, $stackPos) {
                 $self->semValue = array($self->semStack[$stackPos-(1-1)]);
            },
            294 => static function ($self, $stackPos) {
                 $self->semStack[$stackPos-(3-1)][] = $self->semStack[$stackPos-(3-3)]; $self->semValue = $self->semStack[$stackPos-(3-1)];
            },
            295 => static function ($self, $stackPos) {
                 $self->semValue = 0;
            },
            296 => static function ($self, $stackPos) {
                 $self->checkModifier($self->semStack[$stackPos-(2-1)], $self->semStack[$stackPos-(2-2)], $stackPos-(2-2)); $self->semValue = $self->semStack[$stackPos-(2-1)] | $self->semStack[$stackPos-(2-2)];
            },
            297 => static function ($self, $stackPos) {
                 $self->semValue = Modifiers::PUBLIC;
            },
            298 => static function ($self, $stackPos) {
                 $self->semValue = Modifiers::PROTECTED;
            },
            299 => static function ($self, $stackPos) {
                 $self->semValue = Modifiers::PRIVATE;
            },
            300 => static function ($self, $stackPos) {
                 $self->semValue = Modifiers::PUBLIC_SET;
            },
            301 => static function ($self, $stackPos) {
                 $self->semValue = Modifiers::PROTECTED_SET;
            },
            302 => static function ($self, $stackPos) {
                 $self->semValue = Modifiers::PRIVATE_SET;
            },
            303 => static function ($self, $stackPos) {
                 $self->semValue = Modifiers::READONLY;
            },
            304 => static function ($self, $stackPos) {
                 $self->semValue = Modifiers::FINAL;
            },
            305 => static function ($self, $stackPos) {
                 $self->semValue = new Node\Param($self->semStack[$stackPos-(7-6)], null, $self->semStack[$stackPos-(7-3)], $self->semStack[$stackPos-(7-4)], $self->semStack[$stackPos-(7-5)], $self->getAttributes($self->tokenStartStack[$stackPos-(7-1)], $self->tokenEndStack[$stackPos]), $self->semStack[$stackPos-(7-2)], $self->semStack[$stackPos-(7-1)], $self->semStack[$stackPos-(7-7)]);
            $self->checkParam($self->semValue);
            $self->addPropertyNameToHooks($self->semValue);
            },
            306 => static function ($self, $stackPos) {
                 $self->semValue = new Node\Param($self->semStack[$stackPos-(9-6)], $self->semStack[$stackPos-(9-8)], $self->semStack[$stackPos-(9-3)], $self->semStack[$stackPos-(9-4)], $self->semStack[$stackPos-(9-5)], $self->getAttributes($self->tokenStartStack[$stackPos-(9-1)], $self->tokenEndStack[$stackPos]), $self->semStack[$stackPos-(9-2)], $self->semStack[$stackPos-(9-1)], $self->semStack[$stackPos-(9-9)]);
            $self->checkParam($self->semValue);
            $self->addPropertyNameToHooks($self->semValue);
            },
            307 => static function ($self, $stackPos) {
                 $self->semValue = new Node\Param(new Expr\Error($self->getAttributes($self->tokenStartStack[$stackPos-(6-1)], $self->tokenEndStack[$stackPos])), null, $self->semStack[$stackPos-(6-3)], $self->semStack[$stackPos-(6-4)], $self->semStack[$stackPos-(6-5)], $self->getAttributes($self->tokenStartStack[$stackPos-(6-1)], $self->tokenEndStack[$stackPos]), $self->semStack[$stackPos-(6-2)], $self->semStack[$stackPos-(6-1)]);
            },
            308 => null,
            309 => static function ($self, $stackPos) {
                 $self->semValue = new Node\NullableType($self->semStack[$stackPos-(2-2)], $self->getAttributes($self->tokenStartStack[$stackPos-(2-1)], $self->tokenEndStack[$stackPos]));
            },
            310 => static function ($self, $stackPos) {
                 $self->semValue = new Node\UnionType($self->semStack[$stackPos-(1-1)], $self->getAttributes($self->tokenStartStack[$stackPos-(1-1)], $self->tokenEndStack[$stackPos]));
            },
            311 => null,
            312 => null,
            313 => static function ($self, $stackPos) {
                 $self->semValue = new Node\Name('static', $self->getAttributes($self->tokenStartStack[$stackPos-(1-1)], $self->tokenEndStack[$stackPos]));
            },
            314 => static function ($self, $stackPos) {
                 $self->semValue = $self->handleBuiltinTypes($self->semStack[$stackPos-(2-1)]); $self->semValue->setAttribute('generics', $self->semStack[$stackPos-(2-2)]);
            },
            315 => static function ($self, $stackPos) {
                 $self->semValue = new Node\Identifier('array', $self->getAttributes($self->tokenStartStack[$stackPos-(1-1)], $self->tokenEndStack[$stackPos]));
            },
            316 => static function ($self, $stackPos) {
                 $self->semValue = new Node\Identifier('callable', $self->getAttributes($self->tokenStartStack[$stackPos-(1-1)], $self->tokenEndStack[$stackPos]));
            },
            317 => null,
            318 => static function ($self, $stackPos) {
                 $self->semValue = $self->semStack[$stackPos-(3-2)];
            },
            319 => static function ($self, $stackPos) {
                 $self->semValue = array($self->semStack[$stackPos-(3-1)], $self->semStack[$stackPos-(3-3)]);
            },
            320 => static function ($self, $stackPos) {
                 $self->semStack[$stackPos-(3-1)][] = $self->semStack[$stackPos-(3-3)]; $self->semValue = $self->semStack[$stackPos-(3-1)];
            },
            321 => null,
            322 => static function ($self, $stackPos) {
                 $self->semValue = $self->semStack[$stackPos-(3-2)];
            },
            323 => static function ($self, $stackPos) {
                 $self->semValue = array($self->semStack[$stackPos-(3-1)], $self->semStack[$stackPos-(3-3)]);
            },
            324 => static function ($self, $stackPos) {
                 $self->semStack[$stackPos-(3-1)][] = $self->semStack[$stackPos-(3-3)]; $self->semValue = $self->semStack[$stackPos-(3-1)];
            },
            325 => static function ($self, $stackPos) {
                 $self->semValue = array($self->semStack[$stackPos-(3-1)], $self->semStack[$stackPos-(3-3)]);
            },
            326 => static function ($self, $stackPos) {
                 $self->semStack[$stackPos-(3-1)][] = $self->semStack[$stackPos-(3-3)]; $self->semValue = $self->semStack[$stackPos-(3-1)];
            },
            327 => static function ($self, $stackPos) {
                 $self->semValue = new Node\IntersectionType($self->semStack[$stackPos-(1-1)], $self->getAttributes($self->tokenStartStack[$stackPos-(1-1)], $self->tokenEndStack[$stackPos]));
            },
            328 => static function ($self, $stackPos) {
                 $self->semValue = array($self->semStack[$stackPos-(3-1)], $self->semStack[$stackPos-(3-3)]);
            },
            329 => static function ($self, $stackPos) {
                 $self->semStack[$stackPos-(3-1)][] = $self->semStack[$stackPos-(3-3)]; $self->semValue = $self->semStack[$stackPos-(3-1)];
            },
            330 => static function ($self, $stackPos) {
                 $self->semValue = new Node\IntersectionType($self->semStack[$stackPos-(1-1)], $self->getAttributes($self->tokenStartStack[$stackPos-(1-1)], $self->tokenEndStack[$stackPos]));
            },
            331 => null,
            332 => static function ($self, $stackPos) {
                 $self->semValue = new Node\NullableType($self->semStack[$stackPos-(2-2)], $self->getAttributes($self->tokenStartStack[$stackPos-(2-1)], $self->tokenEndStack[$stackPos]));
            },
            333 => static function ($self, $stackPos) {
                 $self->semValue = new Node\UnionType($self->semStack[$stackPos-(1-1)], $self->getAttributes($self->tokenStartStack[$stackPos-(1-1)], $self->tokenEndStack[$stackPos]));
            },
            334 => null,
            335 => static function ($self, $stackPos) {
                 $self->semValue = null;
            },
            336 => null,
            337 => static function ($self, $stackPos) {
                 $self->semValue = null;
            },
            338 => static function ($self, $stackPos) {
                 $self->semValue = $self->semStack[$stackPos-(2-2)];
            },
            339 => static function ($self, $stackPos) {
                 $self->semValue = null;
            },
            340 => static function ($self, $stackPos) {
                 $self->semValue = array();
            },
            341 => static function ($self, $stackPos) {
                 $self->semValue = $self->semStack[$stackPos-(4-2)];
            },
            342 => static function ($self, $stackPos) {
                 $self->semValue = array($self->semStack[$stackPos-(3-2)]);
            },
            343 => static function ($self, $stackPos) {
                 $self->semValue = array();
            },
            344 => static function ($self, $stackPos) {
                 $self->semValue = $self->semStack[$stackPos-(4-2)];
            },
            345 => static function ($self, $stackPos) {
                 $self->semValue = array(new Node\Arg($self->semStack[$stackPos-(4-2)], false, false, $self->getAttributes($self->tokenStartStack[$stackPos-(4-1)], $self->tokenEndStack[$stackPos])));
            },
            346 => static function ($self, $stackPos) {
                 $self->semValue = array($self->semStack[$stackPos-(3-2)]);
            },
            347 => static function ($self, $stackPos) {
                 $self->semValue = array(new Node\Arg($self->semStack[$stackPos-(3-1)], false, false, $self->getAttributes($self->tokenStartStack[$stackPos-(3-1)],  $self->tokenEndStack[$stackPos-(3-1)])), $self->semStack[$stackPos-(3-3)]);
            },
            348 => static function ($self, $stackPos) {
                 $self->semValue = array($self->semStack[$stackPos-(1-1)]);
            },
            349 => static function ($self, $stackPos) {
                 $self->semStack[$stackPos-(3-1)][] = $self->semStack[$stackPos-(3-3)]; $self->semValue = $self->semStack[$stackPos-(3-1)];
            },
            350 => static function ($self, $stackPos) {
                 $self->semValue = new Node\VariadicPlaceholder($self->getAttributes($self->tokenStartStack[$stackPos-(1-1)], $self->tokenEndStack[$stackPos]));
            },
            351 => static function ($self, $stackPos) {
                 $self->semValue = array($self->semStack[$stackPos-(1-1)]);
            },
            352 => static function ($self, $stackPos) {
                 $self->semStack[$stackPos-(3-1)][] = $self->semStack[$stackPos-(3-3)]; $self->semValue = $self->semStack[$stackPos-(3-1)];
            },
            353 => static function ($self, $stackPos) {
                 $self->semValue = new Node\Arg($self->semStack[$stackPos-(2-2)], true, false, $self->getAttributes($self->tokenStartStack[$stackPos-(2-1)], $self->tokenEndStack[$stackPos]));
            },
            354 => static function ($self, $stackPos) {
                 $self->semValue = new Node\Arg($self->semStack[$stackPos-(2-2)], false, true, $self->getAttributes($self->tokenStartStack[$stackPos-(2-1)], $self->tokenEndStack[$stackPos]));
            },
            355 => static function ($self, $stackPos) {
                 $self->semValue = new Node\Arg($self->semStack[$stackPos-(3-3)], false, false, $self->getAttributes($self->tokenStartStack[$stackPos-(3-1)], $self->tokenEndStack[$stackPos]), $self->semStack[$stackPos-(3-1)]);
            },
            356 => static function ($self, $stackPos) {
                 $self->semValue = new Node\Arg($self->semStack[$stackPos-(1-1)], false, false, $self->getAttributes($self->tokenStartStack[$stackPos-(1-1)], $self->tokenEndStack[$stackPos]));
            },
            357 => static function ($self, $stackPos) {
                 $self->semValue = $self->semStack[$stackPos-(1-1)];
            },
            358 => null,
            359 => static function ($self, $stackPos) {
                 $self->semStack[$stackPos-(3-1)][] = $self->semStack[$stackPos-(3-3)]; $self->semValue = $self->semStack[$stackPos-(3-1)];
            },
            360 => static function ($self, $stackPos) {
                 $self->semValue = array($self->semStack[$stackPos-(1-1)]);
            },
            361 => null,
            362 => null,
            363 => static function ($self, $stackPos) {
                 $self->semStack[$stackPos-(3-1)][] = $self->semStack[$stackPos-(3-3)]; $self->semValue = $self->semStack[$stackPos-(3-1)];
            },
            364 => static function ($self, $stackPos) {
                 $self->semValue = array($self->semStack[$stackPos-(1-1)]);
            },
            365 => static function ($self, $stackPos) {
                 $self->semValue = new Node\StaticVar($self->semStack[$stackPos-(1-1)], null, $self->getAttributes($self->tokenStartStack[$stackPos-(1-1)], $self->tokenEndStack[$stackPos]));
            },
            366 => static function ($self, $stackPos) {
                 $self->semValue = new Node\StaticVar($self->semStack[$stackPos-(3-1)], $self->semStack[$stackPos-(3-3)], $self->getAttributes($self->tokenStartStack[$stackPos-(3-1)], $self->tokenEndStack[$stackPos]));
            },
            367 => static function ($self, $stackPos) {
                 if ($self->semStack[$stackPos-(2-2)] !== null) { $self->semStack[$stackPos-(2-1)][] = $self->semStack[$stackPos-(2-2)]; $self->semValue = $self->semStack[$stackPos-(2-1)]; } else { $self->semValue = $self->semStack[$stackPos-(2-1)]; }
            },
            368 => static function ($self, $stackPos) {
                 $self->semValue = array();
            },
            369 => static function ($self, $stackPos) {
                 $nop = $self->maybeCreateZeroLengthNop($self->tokenPos);;
            if ($nop !== null) { $self->semStack[$stackPos-(1-1)][] = $nop; } $self->semValue = $self->semStack[$stackPos-(1-1)];
            },
            370 => static function ($self, $stackPos) {
                 $self->semValue = new Stmt\Property($self->semStack[$stackPos-(5-2)], $self->semStack[$stackPos-(5-4)], $self->getAttributes($self->tokenStartStack[$stackPos-(5-1)], $self->tokenEndStack[$stackPos]), $self->semStack[$stackPos-(5-3)], $self->semStack[$stackPos-(5-1)]);
            },
            371 => static function ($self, $stackPos) {
                 $self->semValue = new Stmt\ClassConst($self->semStack[$stackPos-(5-4)], $self->semStack[$stackPos-(5-2)], $self->getAttributes($self->tokenStartStack[$stackPos-(5-1)], $self->tokenEndStack[$stackPos]), $self->semStack[$stackPos-(5-1)]);
            $self->checkClassConst($self->semValue, $stackPos-(5-2));
            },
            372 => static function ($self, $stackPos) {
                 $self->semValue = new Stmt\ClassConst($self->semStack[$stackPos-(6-5)], $self->semStack[$stackPos-(6-2)], $self->getAttributes($self->tokenStartStack[$stackPos-(6-1)], $self->tokenEndStack[$stackPos]), $self->semStack[$stackPos-(6-1)], $self->semStack[$stackPos-(6-4)]);
            $self->checkClassConst($self->semValue, $stackPos-(6-2));
            },
            373 => static function ($self, $stackPos) {
                 $self->semValue = new Stmt\ClassMethod($self->semStack[$stackPos-(10-5)], ['type' => $self->semStack[$stackPos-(10-2)], 'byRef' => $self->semStack[$stackPos-(10-4)], 'params' => $self->semStack[$stackPos-(10-7)], 'returnType' => $self->semStack[$stackPos-(10-9)], 'stmts' => $self->semStack[$stackPos-(10-10)], 'attrGroups' => $self->semStack[$stackPos-(10-1)]], $self->getAttributes($self->tokenStartStack[$stackPos-(10-1)], $self->tokenEndStack[$stackPos]));
            $self->checkClassMethod($self->semValue, $stackPos-(10-2));
            },
            374 => static function ($self, $stackPos) {
                 $self->semValue = new Stmt\TraitUse($self->semStack[$stackPos-(3-2)], $self->semStack[$stackPos-(3-3)], $self->getAttributes($self->tokenStartStack[$stackPos-(3-1)], $self->tokenEndStack[$stackPos]));
            },
            375 => static function ($self, $stackPos) {
                 $self->semValue = new Stmt\EnumCase($self->semStack[$stackPos-(5-3)], $self->semStack[$stackPos-(5-4)], $self->semStack[$stackPos-(5-1)], $self->getAttributes($self->tokenStartStack[$stackPos-(5-1)], $self->tokenEndStack[$stackPos]));
            },
            376 => static function ($self, $stackPos) {
                 $self->semValue = null; /* will be skipped */
            },
            377 => static function ($self, $stackPos) {
                 $self->semValue = array();
            },
            378 => static function ($self, $stackPos) {
                 $self->semValue = $self->semStack[$stackPos-(3-2)];
            },
            379 => static function ($self, $stackPos) {
                 $self->semValue = array();
            },
            380 => static function ($self, $stackPos) {
                 $self->semStack[$stackPos-(2-1)][] = $self->semStack[$stackPos-(2-2)]; $self->semValue = $self->semStack[$stackPos-(2-1)];
            },
            381 => static function ($self, $stackPos) {
                 $self->semValue = new Stmt\TraitUseAdaptation\Precedence($self->semStack[$stackPos-(4-1)][0], $self->semStack[$stackPos-(4-1)][1], $self->semStack[$stackPos-(4-3)], $self->getAttributes($self->tokenStartStack[$stackPos-(4-1)], $self->tokenEndStack[$stackPos]));
            },
            382 => static function ($self, $stackPos) {
                 $self->semValue = new Stmt\TraitUseAdaptation\Alias($self->semStack[$stackPos-(5-1)][0], $self->semStack[$stackPos-(5-1)][1], $self->semStack[$stackPos-(5-3)], $self->semStack[$stackPos-(5-4)], $self->getAttributes($self->tokenStartStack[$stackPos-(5-1)], $self->tokenEndStack[$stackPos]));
            },
            383 => static function ($self, $stackPos) {
                 $self->semValue = new Stmt\TraitUseAdaptation\Alias($self->semStack[$stackPos-(4-1)][0], $self->semStack[$stackPos-(4-1)][1], $self->semStack[$stackPos-(4-3)], null, $self->getAttributes($self->tokenStartStack[$stackPos-(4-1)], $self->tokenEndStack[$stackPos]));
            },
            384 => static function ($self, $stackPos) {
                 $self->semValue = new Stmt\TraitUseAdaptation\Alias($self->semStack[$stackPos-(4-1)][0], $self->semStack[$stackPos-(4-1)][1], null, $self->semStack[$stackPos-(4-3)], $self->getAttributes($self->tokenStartStack[$stackPos-(4-1)], $self->tokenEndStack[$stackPos]));
            },
            385 => static function ($self, $stackPos) {
                 $self->semValue = new Stmt\TraitUseAdaptation\Alias($self->semStack[$stackPos-(4-1)][0], $self->semStack[$stackPos-(4-1)][1], null, $self->semStack[$stackPos-(4-3)], $self->getAttributes($self->tokenStartStack[$stackPos-(4-1)], $self->tokenEndStack[$stackPos]));
            },
            386 => static function ($self, $stackPos) {
                 $self->semValue = array($self->semStack[$stackPos-(3-1)], $self->semStack[$stackPos-(3-3)]);
            },
            387 => null,
            388 => static function ($self, $stackPos) {
                 $self->semValue = array(null, $self->semStack[$stackPos-(1-1)]);
            },
            389 => static function ($self, $stackPos) {
                 $self->semValue = null;
            },
            390 => null,
            391 => null,
            392 => static function ($self, $stackPos) {
                 $self->semValue = 0;
            },
            393 => static function ($self, $stackPos) {
                 $self->semValue = 0;
            },
            394 => null,
            395 => null,
            396 => static function ($self, $stackPos) {
                 $self->checkModifier($self->semStack[$stackPos-(2-1)], $self->semStack[$stackPos-(2-2)], $stackPos-(2-2)); $self->semValue = $self->semStack[$stackPos-(2-1)] | $self->semStack[$stackPos-(2-2)];
            },
            397 => static function ($self, $stackPos) {
                 $self->semValue = Modifiers::PUBLIC;
            },
            398 => static function ($self, $stackPos) {
                 $self->semValue = Modifiers::PROTECTED;
            },
            399 => static function ($self, $stackPos) {
                 $self->semValue = Modifiers::PRIVATE;
            },
            400 => static function ($self, $stackPos) {
                 $self->semValue = Modifiers::PUBLIC_SET;
            },
            401 => static function ($self, $stackPos) {
                 $self->semValue = Modifiers::PROTECTED_SET;
            },
            402 => static function ($self, $stackPos) {
                 $self->semValue = Modifiers::PRIVATE_SET;
            },
            403 => static function ($self, $stackPos) {
                 $self->semValue = Modifiers::STATIC;
            },
            404 => static function ($self, $stackPos) {
                 $self->semValue = Modifiers::ABSTRACT;
            },
            405 => static function ($self, $stackPos) {
                 $self->semValue = Modifiers::FINAL;
            },
            406 => static function ($self, $stackPos) {
                 $self->semValue = Modifiers::READONLY;
            },
            407 => null,
            408 => static function ($self, $stackPos) {
                 $self->semValue = array($self->semStack[$stackPos-(1-1)]);
            },
            409 => static function ($self, $stackPos) {
                 $self->semStack[$stackPos-(3-1)][] = $self->semStack[$stackPos-(3-3)]; $self->semValue = $self->semStack[$stackPos-(3-1)];
            },
            410 => static function ($self, $stackPos) {
                 $self->semValue = new Node\VarLikeIdentifier(substr($self->semStack[$stackPos-(1-1)], 1), $self->getAttributes($self->tokenStartStack[$stackPos-(1-1)], $self->tokenEndStack[$stackPos]));
            },
            411 => static function ($self, $stackPos) {
                 $self->semValue = new Node\PropertyItem($self->semStack[$stackPos-(1-1)], null, $self->getAttributes($self->tokenStartStack[$stackPos-(1-1)], $self->tokenEndStack[$stackPos]));
            },
            412 => static function ($self, $stackPos) {
                 $self->semValue = new Node\PropertyItem($self->semStack[$stackPos-(3-1)], $self->semStack[$stackPos-(3-3)], $self->getAttributes($self->tokenStartStack[$stackPos-(3-1)], $self->tokenEndStack[$stackPos]));
            },
            413 => static function ($self, $stackPos) {
                 $self->semValue = [];
            },
            414 => static function ($self, $stackPos) {
                 $self->semStack[$stackPos-(2-1)][] = $self->semStack[$stackPos-(2-2)]; $self->semValue = $self->semStack[$stackPos-(2-1)];
            },
            415 => static function ($self, $stackPos) {
                 $self->semValue = [];
            },
            416 => static function ($self, $stackPos) {
                 $self->semValue = new Node\PropertyHook($self->semStack[$stackPos-(5-4)], $self->semStack[$stackPos-(5-5)], ['flags' => $self->semStack[$stackPos-(5-2)], 'byRef' => $self->semStack[$stackPos-(5-3)], 'params' => [], 'attrGroups' => $self->semStack[$stackPos-(5-1)]], $self->getAttributes($self->tokenStartStack[$stackPos-(5-1)], $self->tokenEndStack[$stackPos]));
            $self->checkPropertyHook($self->semValue, null);
            },
            417 => static function ($self, $stackPos) {
                 $self->semValue = new Node\PropertyHook($self->semStack[$stackPos-(8-4)], $self->semStack[$stackPos-(8-8)], ['flags' => $self->semStack[$stackPos-(8-2)], 'byRef' => $self->semStack[$stackPos-(8-3)], 'params' => $self->semStack[$stackPos-(8-6)], 'attrGroups' => $self->semStack[$stackPos-(8-1)]], $self->getAttributes($self->tokenStartStack[$stackPos-(8-1)], $self->tokenEndStack[$stackPos]));
            $self->checkPropertyHook($self->semValue, $stackPos-(8-5));
            },
            418 => static function ($self, $stackPos) {
                 $self->semValue = null;
            },
            419 => static function ($self, $stackPos) {
                 $self->semValue = $self->semStack[$stackPos-(3-2)];
            },
            420 => static function ($self, $stackPos) {
                 $self->semValue = $self->semStack[$stackPos-(3-2)];
            },
            421 => static function ($self, $stackPos) {
                 $self->semValue = 0;
            },
            422 => static function ($self, $stackPos) {
                 $self->checkPropertyHookModifiers($self->semStack[$stackPos-(2-1)], $self->semStack[$stackPos-(2-2)], $stackPos-(2-2)); $self->semValue = $self->semStack[$stackPos-(2-1)] | $self->semStack[$stackPos-(2-2)];
            },
            423 => null,
            424 => null,
            425 => static function ($self, $stackPos) {
                 $self->semStack[$stackPos-(3-1)][] = $self->semStack[$stackPos-(3-3)]; $self->semValue = $self->semStack[$stackPos-(3-1)];
            },
            426 => static function ($self, $stackPos) {
                 $self->semValue = array($self->semStack[$stackPos-(1-1)]);
            },
            427 => static function ($self, $stackPos) {
                 $self->semValue = array();
            },
            428 => null,
            429 => null,
            430 => static function ($self, $stackPos) {
                 $self->semValue = new Expr\Assign($self->semStack[$stackPos-(3-1)], $self->semStack[$stackPos-(3-3)], $self->getAttributes($self->tokenStartStack[$stackPos-(3-1)], $self->tokenEndStack[$stackPos]));
            },
            431 => static function ($self, $stackPos) {
                 $self->semValue = new Expr\Assign($self->fixupArrayDestructuring($self->semStack[$stackPos-(3-1)]), $self->semStack[$stackPos-(3-3)], $self->getAttributes($self->tokenStartStack[$stackPos-(3-1)], $self->tokenEndStack[$stackPos]));
            },
            432 => static function ($self, $stackPos) {
                 $self->semValue = new Expr\Assign($self->semStack[$stackPos-(3-1)], $self->semStack[$stackPos-(3-3)], $self->getAttributes($self->tokenStartStack[$stackPos-(3-1)], $self->tokenEndStack[$stackPos]));
            },
            433 => static function ($self, $stackPos) {
                 $self->semValue = new Expr\AssignRef($self->semStack[$stackPos-(4-1)], $self->semStack[$stackPos-(4-4)], $self->getAttributes($self->tokenStartStack[$stackPos-(4-1)], $self->tokenEndStack[$stackPos]));
            },
            434 => static function ($self, $stackPos) {
                 $self->semValue = new Expr\AssignRef($self->semStack[$stackPos-(4-1)], $self->semStack[$stackPos-(4-4)], $self->getAttributes($self->tokenStartStack[$stackPos-(4-1)], $self->tokenEndStack[$stackPos]));
            if (!$self->phpVersion->allowsAssignNewByReference()) {
                $self->emitError(new Error('Cannot assign new by reference', $self->getAttributes($self->tokenStartStack[$stackPos-(4-1)], $self->tokenEndStack[$stackPos])));
            }

            },
            435 => null,
            436 => null,
            437 => static function ($self, $stackPos) {
                 $self->semValue = new Expr\FuncCall(new Node\Name($self->semStack[$stackPos-(2-1)], $self->getAttributes($self->tokenStartStack[$stackPos-(2-1)],  $self->tokenEndStack[$stackPos-(2-1)])), $self->semStack[$stackPos-(2-2)], $self->getAttributes($self->tokenStartStack[$stackPos-(2-1)], $self->tokenEndStack[$stackPos]));
            },
            438 => static function ($self, $stackPos) {
                 $self->semValue = new Expr\Clone_($self->semStack[$stackPos-(2-2)], $self->getAttributes($self->tokenStartStack[$stackPos-(2-1)], $self->tokenEndStack[$stackPos]));
            },
            439 => static function ($self, $stackPos) {
                 $self->semValue = new Expr\AssignOp\Plus($self->semStack[$stackPos-(3-1)], $self->semStack[$stackPos-(3-3)], $self->getAttributes($self->tokenStartStack[$stackPos-(3-1)], $self->tokenEndStack[$stackPos]));
            },
            440 => static function ($self, $stackPos) {
                 $self->semValue = new Expr\AssignOp\Minus($self->semStack[$stackPos-(3-1)], $self->semStack[$stackPos-(3-3)], $self->getAttributes($self->tokenStartStack[$stackPos-(3-1)], $self->tokenEndStack[$stackPos]));
            },
            441 => static function ($self, $stackPos) {
                 $self->semValue = new Expr\AssignOp\Mul($self->semStack[$stackPos-(3-1)], $self->semStack[$stackPos-(3-3)], $self->getAttributes($self->tokenStartStack[$stackPos-(3-1)], $self->tokenEndStack[$stackPos]));
            },
            442 => static function ($self, $stackPos) {
                 $self->semValue = new Expr\AssignOp\Div($self->semStack[$stackPos-(3-1)], $self->semStack[$stackPos-(3-3)], $self->getAttributes($self->tokenStartStack[$stackPos-(3-1)], $self->tokenEndStack[$stackPos]));
            },
            443 => static function ($self, $stackPos) {
                 $self->semValue = new Expr\AssignOp\Concat($self->semStack[$stackPos-(3-1)], $self->semStack[$stackPos-(3-3)], $self->getAttributes($self->tokenStartStack[$stackPos-(3-1)], $self->tokenEndStack[$stackPos]));
            },
            444 => static function ($self, $stackPos) {
                 $self->semValue = new Expr\AssignOp\Mod($self->semStack[$stackPos-(3-1)], $self->semStack[$stackPos-(3-3)], $self->getAttributes($self->tokenStartStack[$stackPos-(3-1)], $self->tokenEndStack[$stackPos]));
            },
            445 => static function ($self, $stackPos) {
                 $self->semValue = new Expr\AssignOp\BitwiseAnd($self->semStack[$stackPos-(3-1)], $self->semStack[$stackPos-(3-3)], $self->getAttributes($self->tokenStartStack[$stackPos-(3-1)], $self->tokenEndStack[$stackPos]));
            },
            446 => static function ($self, $stackPos) {
                 $self->semValue = new Expr\AssignOp\BitwiseOr($self->semStack[$stackPos-(3-1)], $self->semStack[$stackPos-(3-3)], $self->getAttributes($self->tokenStartStack[$stackPos-(3-1)], $self->tokenEndStack[$stackPos]));
            },
            447 => static function ($self, $stackPos) {
                 $self->semValue = new Expr\AssignOp\BitwiseXor($self->semStack[$stackPos-(3-1)], $self->semStack[$stackPos-(3-3)], $self->getAttributes($self->tokenStartStack[$stackPos-(3-1)], $self->tokenEndStack[$stackPos]));
            },
            448 => static function ($self, $stackPos) {
                 $self->semValue = new Expr\AssignOp\ShiftLeft($self->semStack[$stackPos-(3-1)], $self->semStack[$stackPos-(3-3)], $self->getAttributes($self->tokenStartStack[$stackPos-(3-1)], $self->tokenEndStack[$stackPos]));
            },
            449 => static function ($self, $stackPos) {
                 $self->semValue = new Expr\AssignOp\ShiftRight($self->semStack[$stackPos-(3-1)], $self->semStack[$stackPos-(3-3)], $self->getAttributes($self->tokenStartStack[$stackPos-(3-1)], $self->tokenEndStack[$stackPos]));
            },
            450 => static function ($self, $stackPos) {
                 $self->semValue = new Expr\AssignOp\Pow($self->semStack[$stackPos-(3-1)], $self->semStack[$stackPos-(3-3)], $self->getAttributes($self->tokenStartStack[$stackPos-(3-1)], $self->tokenEndStack[$stackPos]));
            },
            451 => static function ($self, $stackPos) {
                 $self->semValue = new Expr\AssignOp\Coalesce($self->semStack[$stackPos-(3-1)], $self->semStack[$stackPos-(3-3)], $self->getAttributes($self->tokenStartStack[$stackPos-(3-1)], $self->tokenEndStack[$stackPos]));
            },
            452 => static function ($self, $stackPos) {
                 $self->semValue = new Expr\PostInc($self->semStack[$stackPos-(2-1)], $self->getAttributes($self->tokenStartStack[$stackPos-(2-1)], $self->tokenEndStack[$stackPos]));
            },
            453 => static function ($self, $stackPos) {
                 $self->semValue = new Expr\PreInc($self->semStack[$stackPos-(2-2)], $self->getAttributes($self->tokenStartStack[$stackPos-(2-1)], $self->tokenEndStack[$stackPos]));
            },
            454 => static function ($self, $stackPos) {
                 $self->semValue = new Expr\PostDec($self->semStack[$stackPos-(2-1)], $self->getAttributes($self->tokenStartStack[$stackPos-(2-1)], $self->tokenEndStack[$stackPos]));
            },
            455 => static function ($self, $stackPos) {
                 $self->semValue = new Expr\PreDec($self->semStack[$stackPos-(2-2)], $self->getAttributes($self->tokenStartStack[$stackPos-(2-1)], $self->tokenEndStack[$stackPos]));
            },
            456 => static function ($self, $stackPos) {
                 $self->semValue = new Expr\BinaryOp\BooleanOr($self->semStack[$stackPos-(3-1)], $self->semStack[$stackPos-(3-3)], $self->getAttributes($self->tokenStartStack[$stackPos-(3-1)], $self->tokenEndStack[$stackPos]));
            },
            457 => static function ($self, $stackPos) {
                 $self->semValue = new Expr\BinaryOp\BooleanAnd($self->semStack[$stackPos-(3-1)], $self->semStack[$stackPos-(3-3)], $self->getAttributes($self->tokenStartStack[$stackPos-(3-1)], $self->tokenEndStack[$stackPos]));
            },
            458 => static function ($self, $stackPos) {
                 $self->semValue = new Expr\BinaryOp\LogicalOr($self->semStack[$stackPos-(3-1)], $self->semStack[$stackPos-(3-3)], $self->getAttributes($self->tokenStartStack[$stackPos-(3-1)], $self->tokenEndStack[$stackPos]));
            },
            459 => static function ($self, $stackPos) {
                 $self->semValue = new Expr\BinaryOp\LogicalAnd($self->semStack[$stackPos-(3-1)], $self->semStack[$stackPos-(3-3)], $self->getAttributes($self->tokenStartStack[$stackPos-(3-1)], $self->tokenEndStack[$stackPos]));
            },
            460 => static function ($self, $stackPos) {
                 $self->semValue = new Expr\BinaryOp\LogicalXor($self->semStack[$stackPos-(3-1)], $self->semStack[$stackPos-(3-3)], $self->getAttributes($self->tokenStartStack[$stackPos-(3-1)], $self->tokenEndStack[$stackPos]));
            },
            461 => static function ($self, $stackPos) {
                 $self->semValue = new Expr\BinaryOp\BitwiseOr($self->semStack[$stackPos-(3-1)], $self->semStack[$stackPos-(3-3)], $self->getAttributes($self->tokenStartStack[$stackPos-(3-1)], $self->tokenEndStack[$stackPos]));
            },
            462 => static function ($self, $stackPos) {
                 $self->semValue = new Expr\BinaryOp\BitwiseAnd($self->semStack[$stackPos-(3-1)], $self->semStack[$stackPos-(3-3)], $self->getAttributes($self->tokenStartStack[$stackPos-(3-1)], $self->tokenEndStack[$stackPos]));
            },
            463 => static function ($self, $stackPos) {
                 $self->semValue = new Expr\BinaryOp\BitwiseAnd($self->semStack[$stackPos-(3-1)], $self->semStack[$stackPos-(3-3)], $self->getAttributes($self->tokenStartStack[$stackPos-(3-1)], $self->tokenEndStack[$stackPos]));
            },
            464 => static function ($self, $stackPos) {
                 $self->semValue = new Expr\BinaryOp\BitwiseXor($self->semStack[$stackPos-(3-1)], $self->semStack[$stackPos-(3-3)], $self->getAttributes($self->tokenStartStack[$stackPos-(3-1)], $self->tokenEndStack[$stackPos]));
            },
            465 => static function ($self, $stackPos) {
                 $self->semValue = new Expr\BinaryOp\Concat($self->semStack[$stackPos-(3-1)], $self->semStack[$stackPos-(3-3)], $self->getAttributes($self->tokenStartStack[$stackPos-(3-1)], $self->tokenEndStack[$stackPos]));
            },
            466 => static function ($self, $stackPos) {
                 $self->semValue = new Expr\BinaryOp\Plus($self->semStack[$stackPos-(3-1)], $self->semStack[$stackPos-(3-3)], $self->getAttributes($self->tokenStartStack[$stackPos-(3-1)], $self->tokenEndStack[$stackPos]));
            },
            467 => static function ($self, $stackPos) {
                 $self->semValue = new Expr\BinaryOp\Minus($self->semStack[$stackPos-(3-1)], $self->semStack[$stackPos-(3-3)], $self->getAttributes($self->tokenStartStack[$stackPos-(3-1)], $self->tokenEndStack[$stackPos]));
            },
            468 => static function ($self, $stackPos) {
                 $self->semValue = new Expr\BinaryOp\Mul($self->semStack[$stackPos-(3-1)], $self->semStack[$stackPos-(3-3)], $self->getAttributes($self->tokenStartStack[$stackPos-(3-1)], $self->tokenEndStack[$stackPos]));
            },
            469 => static function ($self, $stackPos) {
                 $self->semValue = new Expr\BinaryOp\Div($self->semStack[$stackPos-(3-1)], $self->semStack[$stackPos-(3-3)], $self->getAttributes($self->tokenStartStack[$stackPos-(3-1)], $self->tokenEndStack[$stackPos]));
            },
            470 => static function ($self, $stackPos) {
                 $self->semValue = new Expr\BinaryOp\Mod($self->semStack[$stackPos-(3-1)], $self->semStack[$stackPos-(3-3)], $self->getAttributes($self->tokenStartStack[$stackPos-(3-1)], $self->tokenEndStack[$stackPos]));
            },
            471 => static function ($self, $stackPos) {
                 $self->semValue = new Expr\BinaryOp\ShiftLeft($self->semStack[$stackPos-(3-1)], $self->semStack[$stackPos-(3-3)], $self->getAttributes($self->tokenStartStack[$stackPos-(3-1)], $self->tokenEndStack[$stackPos]));
            },
            472 => static function ($self, $stackPos) {
                 $self->semValue = new Expr\BinaryOp\ShiftRight($self->semStack[$stackPos-(3-1)], $self->semStack[$stackPos-(3-3)], $self->getAttributes($self->tokenStartStack[$stackPos-(3-1)], $self->tokenEndStack[$stackPos]));
            },
            473 => static function ($self, $stackPos) {
                 $self->semValue = new Expr\BinaryOp\Pow($self->semStack[$stackPos-(3-1)], $self->semStack[$stackPos-(3-3)], $self->getAttributes($self->tokenStartStack[$stackPos-(3-1)], $self->tokenEndStack[$stackPos]));
            },
            474 => static function ($self, $stackPos) {
                 $self->semValue = new Expr\UnaryPlus($self->semStack[$stackPos-(2-2)], $self->getAttributes($self->tokenStartStack[$stackPos-(2-1)], $self->tokenEndStack[$stackPos]));
            },
            475 => static function ($self, $stackPos) {
                 $self->semValue = new Expr\UnaryMinus($self->semStack[$stackPos-(2-2)], $self->getAttributes($self->tokenStartStack[$stackPos-(2-1)], $self->tokenEndStack[$stackPos]));
            },
            476 => static function ($self, $stackPos) {
                 $self->semValue = new Expr\BooleanNot($self->semStack[$stackPos-(2-2)], $self->getAttributes($self->tokenStartStack[$stackPos-(2-1)], $self->tokenEndStack[$stackPos]));
            },
            477 => static function ($self, $stackPos) {
                 $self->semValue = new Expr\BitwiseNot($self->semStack[$stackPos-(2-2)], $self->getAttributes($self->tokenStartStack[$stackPos-(2-1)], $self->tokenEndStack[$stackPos]));
            },
            478 => static function ($self, $stackPos) {
                 $self->semValue = new Expr\BinaryOp\Identical($self->semStack[$stackPos-(3-1)], $self->semStack[$stackPos-(3-3)], $self->getAttributes($self->tokenStartStack[$stackPos-(3-1)], $self->tokenEndStack[$stackPos]));
            },
            479 => static function ($self, $stackPos) {
                 $self->semValue = new Expr\BinaryOp\NotIdentical($self->semStack[$stackPos-(3-1)], $self->semStack[$stackPos-(3-3)], $self->getAttributes($self->tokenStartStack[$stackPos-(3-1)], $self->tokenEndStack[$stackPos]));
            },
            480 => static function ($self, $stackPos) {
                 $self->semValue = new Expr\BinaryOp\Equal($self->semStack[$stackPos-(3-1)], $self->semStack[$stackPos-(3-3)], $self->getAttributes($self->tokenStartStack[$stackPos-(3-1)], $self->tokenEndStack[$stackPos]));
            },
            481 => static function ($self, $stackPos) {
                 $self->semValue = new Expr\BinaryOp\NotEqual($self->semStack[$stackPos-(3-1)], $self->semStack[$stackPos-(3-3)], $self->getAttributes($self->tokenStartStack[$stackPos-(3-1)], $self->tokenEndStack[$stackPos]));
            },
            482 => static function ($self, $stackPos) {
                 $self->semValue = new Expr\BinaryOp\Spaceship($self->semStack[$stackPos-(3-1)], $self->semStack[$stackPos-(3-3)], $self->getAttributes($self->tokenStartStack[$stackPos-(3-1)], $self->tokenEndStack[$stackPos]));
            },
            483 => static function ($self, $stackPos) {
                 $self->semValue = new Expr\BinaryOp\Smaller($self->semStack[$stackPos-(3-1)], $self->semStack[$stackPos-(3-3)], $self->getAttributes($self->tokenStartStack[$stackPos-(3-1)], $self->tokenEndStack[$stackPos]));
            },
            484 => static function ($self, $stackPos) {
                 $self->semValue = new Expr\BinaryOp\SmallerOrEqual($self->semStack[$stackPos-(3-1)], $self->semStack[$stackPos-(3-3)], $self->getAttributes($self->tokenStartStack[$stackPos-(3-1)], $self->tokenEndStack[$stackPos]));
            },
            485 => static function ($self, $stackPos) {
                 $self->semValue = new Expr\BinaryOp\Greater($self->semStack[$stackPos-(3-1)], $self->semStack[$stackPos-(3-3)], $self->getAttributes($self->tokenStartStack[$stackPos-(3-1)], $self->tokenEndStack[$stackPos]));
            },
            486 => static function ($self, $stackPos) {
                 $self->semValue = new Expr\BinaryOp\GreaterOrEqual($self->semStack[$stackPos-(3-1)], $self->semStack[$stackPos-(3-3)], $self->getAttributes($self->tokenStartStack[$stackPos-(3-1)], $self->tokenEndStack[$stackPos]));
            },
            487 => static function ($self, $stackPos) {
                 $self->semValue = new Expr\Instanceof_($self->semStack[$stackPos-(3-1)], $self->semStack[$stackPos-(3-3)], $self->getAttributes($self->tokenStartStack[$stackPos-(3-1)], $self->tokenEndStack[$stackPos]));
            },
            488 => static function ($self, $stackPos) {
                 $self->semValue = $self->semStack[$stackPos-(3-2)];
            },
            489 => static function ($self, $stackPos) {
                 $self->semValue = new Expr\Ternary($self->semStack[$stackPos-(5-1)], $self->semStack[$stackPos-(5-3)], $self->semStack[$stackPos-(5-5)], $self->getAttributes($self->tokenStartStack[$stackPos-(5-1)], $self->tokenEndStack[$stackPos]));
            },
            490 => static function ($self, $stackPos) {
                 $self->semValue = new Expr\Ternary($self->semStack[$stackPos-(4-1)], null, $self->semStack[$stackPos-(4-4)], $self->getAttributes($self->tokenStartStack[$stackPos-(4-1)], $self->tokenEndStack[$stackPos]));
            },
            491 => static function ($self, $stackPos) {
                 $self->semValue = new Expr\BinaryOp\Coalesce($self->semStack[$stackPos-(3-1)], $self->semStack[$stackPos-(3-3)], $self->getAttributes($self->tokenStartStack[$stackPos-(3-1)], $self->tokenEndStack[$stackPos]));
            },
            492 => static function ($self, $stackPos) {
                 $self->semValue = new Expr\Isset_($self->semStack[$stackPos-(4-3)], $self->getAttributes($self->tokenStartStack[$stackPos-(4-1)], $self->tokenEndStack[$stackPos]));
            },
            493 => static function ($self, $stackPos) {
                 $self->semValue = new Expr\Empty_($self->semStack[$stackPos-(4-3)], $self->getAttributes($self->tokenStartStack[$stackPos-(4-1)], $self->tokenEndStack[$stackPos]));
            },
            494 => static function ($self, $stackPos) {
                 $self->semValue = new Expr\Include_($self->semStack[$stackPos-(2-2)], Expr\Include_::TYPE_INCLUDE, $self->getAttributes($self->tokenStartStack[$stackPos-(2-1)], $self->tokenEndStack[$stackPos]));
            },
            495 => static function ($self, $stackPos) {
                 $self->semValue = new Expr\Include_($self->semStack[$stackPos-(2-2)], Expr\Include_::TYPE_INCLUDE_ONCE, $self->getAttributes($self->tokenStartStack[$stackPos-(2-1)], $self->tokenEndStack[$stackPos]));
            },
            496 => static function ($self, $stackPos) {
                 $self->semValue = new Expr\Eval_($self->semStack[$stackPos-(4-3)], $self->getAttributes($self->tokenStartStack[$stackPos-(4-1)], $self->tokenEndStack[$stackPos]));
            },
            497 => static function ($self, $stackPos) {
                 $self->semValue = new Expr\Include_($self->semStack[$stackPos-(2-2)], Expr\Include_::TYPE_REQUIRE, $self->getAttributes($self->tokenStartStack[$stackPos-(2-1)], $self->tokenEndStack[$stackPos]));
            },
            498 => static function ($self, $stackPos) {
                 $self->semValue = new Expr\Include_($self->semStack[$stackPos-(2-2)], Expr\Include_::TYPE_REQUIRE_ONCE, $self->getAttributes($self->tokenStartStack[$stackPos-(2-1)], $self->tokenEndStack[$stackPos]));
            },
            499 => static function ($self, $stackPos) {
                 $attrs = $self->getAttributes($self->tokenStartStack[$stackPos-(2-1)], $self->tokenEndStack[$stackPos]);
            $attrs['kind'] = $self->getIntCastKind($self->semStack[$stackPos-(2-1)]);
            $self->semValue = new Expr\Cast\Int_($self->semStack[$stackPos-(2-2)], $attrs);
            },
            500 => static function ($self, $stackPos) {
                 $attrs = $self->getAttributes($self->tokenStartStack[$stackPos-(2-1)], $self->tokenEndStack[$stackPos]);
            $attrs['kind'] = $self->getFloatCastKind($self->semStack[$stackPos-(2-1)]);
            $self->semValue = new Expr\Cast\Double($self->semStack[$stackPos-(2-2)], $attrs);
            },
            501 => static function ($self, $stackPos) {
                 $attrs = $self->getAttributes($self->tokenStartStack[$stackPos-(2-1)], $self->tokenEndStack[$stackPos]);
            $attrs['kind'] = $self->getStringCastKind($self->semStack[$stackPos-(2-1)]);
            $self->semValue = new Expr\Cast\String_($self->semStack[$stackPos-(2-2)], $attrs);
            },
            502 => static function ($self, $stackPos) {
                 $self->semValue = new Expr\Cast\Array_($self->semStack[$stackPos-(2-2)], $self->getAttributes($self->tokenStartStack[$stackPos-(2-1)], $self->tokenEndStack[$stackPos]));
            },
            503 => static function ($self, $stackPos) {
                 $self->semValue = new Expr\Cast\Object_($self->semStack[$stackPos-(2-2)], $self->getAttributes($self->tokenStartStack[$stackPos-(2-1)], $self->tokenEndStack[$stackPos]));
            },
            504 => static function ($self, $stackPos) {
                 $attrs = $self->getAttributes($self->tokenStartStack[$stackPos-(2-1)], $self->tokenEndStack[$stackPos]);
            $attrs['kind'] = $self->getBoolCastKind($self->semStack[$stackPos-(2-1)]);
            $self->semValue = new Expr\Cast\Bool_($self->semStack[$stackPos-(2-2)], $attrs);
            },
            505 => static function ($self, $stackPos) {
                 $self->semValue = new Expr\Cast\Unset_($self->semStack[$stackPos-(2-2)], $self->getAttributes($self->tokenStartStack[$stackPos-(2-1)], $self->tokenEndStack[$stackPos]));
            },
            506 => static function ($self, $stackPos) {
                 $self->semValue = new Expr\Cast\Void_($self->semStack[$stackPos-(2-2)], $self->getAttributes($self->tokenStartStack[$stackPos-(2-1)], $self->tokenEndStack[$stackPos]));
            },
            507 => static function ($self, $stackPos) {
                 $self->semValue = $self->createExitExpr($self->semStack[$stackPos-(2-1)], $stackPos-(2-1), $self->semStack[$stackPos-(2-2)], $self->getAttributes($self->tokenStartStack[$stackPos-(2-1)], $self->tokenEndStack[$stackPos]));
            },
            508 => static function ($self, $stackPos) {
                 $self->semValue = new Expr\ErrorSuppress($self->semStack[$stackPos-(2-2)], $self->getAttributes($self->tokenStartStack[$stackPos-(2-1)], $self->tokenEndStack[$stackPos]));
            },
            509 => null,
            510 => static function ($self, $stackPos) {
                 $self->semValue = new Expr\ShellExec($self->semStack[$stackPos-(3-2)], $self->getAttributes($self->tokenStartStack[$stackPos-(3-1)], $self->tokenEndStack[$stackPos]));
            },
            511 => static function ($self, $stackPos) {
                 $self->semValue = new Expr\Print_($self->semStack[$stackPos-(2-2)], $self->getAttributes($self->tokenStartStack[$stackPos-(2-1)], $self->tokenEndStack[$stackPos]));
            },
            512 => static function ($self, $stackPos) {
                 $self->semValue = new Expr\Yield_(null, null, $self->getAttributes($self->tokenStartStack[$stackPos-(1-1)], $self->tokenEndStack[$stackPos]));
            },
            513 => static function ($self, $stackPos) {
                 $self->semValue = new Expr\Yield_($self->semStack[$stackPos-(2-2)], null, $self->getAttributes($self->tokenStartStack[$stackPos-(2-1)], $self->tokenEndStack[$stackPos]));
            },
            514 => static function ($self, $stackPos) {
                 $self->semValue = new Expr\Yield_($self->semStack[$stackPos-(4-4)], $self->semStack[$stackPos-(4-2)], $self->getAttributes($self->tokenStartStack[$stackPos-(4-1)], $self->tokenEndStack[$stackPos]));
            },
            515 => static function ($self, $stackPos) {
                 $self->semValue = new Expr\YieldFrom($self->semStack[$stackPos-(2-2)], $self->getAttributes($self->tokenStartStack[$stackPos-(2-1)], $self->tokenEndStack[$stackPos]));
            },
            516 => static function ($self, $stackPos) {
                 $self->semValue = new Expr\Throw_($self->semStack[$stackPos-(2-2)], $self->getAttributes($self->tokenStartStack[$stackPos-(2-1)], $self->tokenEndStack[$stackPos]));
            },
            517 => static function ($self, $stackPos) {
                 $self->semValue = new Expr\ArrowFunction(['static' => false, 'byRef' => $self->semStack[$stackPos-(8-2)], 'params' => $self->semStack[$stackPos-(8-4)], 'returnType' => $self->semStack[$stackPos-(8-6)], 'expr' => $self->semStack[$stackPos-(8-8)], 'attrGroups' => []], $self->getAttributes($self->tokenStartStack[$stackPos-(8-1)], $self->tokenEndStack[$stackPos]));
            },
            518 => static function ($self, $stackPos) {
                 $self->semValue = new Expr\ArrowFunction(['static' => true, 'byRef' => $self->semStack[$stackPos-(9-3)], 'params' => $self->semStack[$stackPos-(9-5)], 'returnType' => $self->semStack[$stackPos-(9-7)], 'expr' => $self->semStack[$stackPos-(9-9)], 'attrGroups' => []], $self->getAttributes($self->tokenStartStack[$stackPos-(9-1)], $self->tokenEndStack[$stackPos]));
            },
            519 => static function ($self, $stackPos) {
                 $self->semValue = new Expr\Closure(['static' => false, 'byRef' => $self->semStack[$stackPos-(8-2)], 'params' => $self->semStack[$stackPos-(8-4)], 'uses' => $self->semStack[$stackPos-(8-6)], 'returnType' => $self->semStack[$stackPos-(8-7)], 'stmts' => $self->semStack[$stackPos-(8-8)], 'attrGroups' => []], $self->getAttributes($self->tokenStartStack[$stackPos-(8-1)], $self->tokenEndStack[$stackPos]));
            },
            520 => static function ($self, $stackPos) {
                 $self->semValue = new Expr\Closure(['static' => true, 'byRef' => $self->semStack[$stackPos-(9-3)], 'params' => $self->semStack[$stackPos-(9-5)], 'uses' => $self->semStack[$stackPos-(9-7)], 'returnType' => $self->semStack[$stackPos-(9-8)], 'stmts' => $self->semStack[$stackPos-(9-9)], 'attrGroups' => []], $self->getAttributes($self->tokenStartStack[$stackPos-(9-1)], $self->tokenEndStack[$stackPos]));
            },
            521 => static function ($self, $stackPos) {
                 $self->semValue = new Expr\ArrowFunction(['static' => false, 'byRef' => $self->semStack[$stackPos-(9-3)], 'params' => $self->semStack[$stackPos-(9-5)], 'returnType' => $self->semStack[$stackPos-(9-7)], 'expr' => $self->semStack[$stackPos-(9-9)], 'attrGroups' => $self->semStack[$stackPos-(9-1)]], $self->getAttributes($self->tokenStartStack[$stackPos-(9-1)], $self->tokenEndStack[$stackPos]));
            },
            522 => static function ($self, $stackPos) {
                 $self->semValue = new Expr\ArrowFunction(['static' => true, 'byRef' => $self->semStack[$stackPos-(10-4)], 'params' => $self->semStack[$stackPos-(10-6)], 'returnType' => $self->semStack[$stackPos-(10-8)], 'expr' => $self->semStack[$stackPos-(10-10)], 'attrGroups' => $self->semStack[$stackPos-(10-1)]], $self->getAttributes($self->tokenStartStack[$stackPos-(10-1)], $self->tokenEndStack[$stackPos]));
            },
            523 => static function ($self, $stackPos) {
                 $self->semValue = new Expr\Closure(['static' => false, 'byRef' => $self->semStack[$stackPos-(9-3)], 'params' => $self->semStack[$stackPos-(9-5)], 'uses' => $self->semStack[$stackPos-(9-7)], 'returnType' => $self->semStack[$stackPos-(9-8)], 'stmts' => $self->semStack[$stackPos-(9-9)], 'attrGroups' => $self->semStack[$stackPos-(9-1)]], $self->getAttributes($self->tokenStartStack[$stackPos-(9-1)], $self->tokenEndStack[$stackPos]));
            },
            524 => static function ($self, $stackPos) {
                 $self->semValue = new Expr\Closure(['static' => true, 'byRef' => $self->semStack[$stackPos-(10-4)], 'params' => $self->semStack[$stackPos-(10-6)], 'uses' => $self->semStack[$stackPos-(10-8)], 'returnType' => $self->semStack[$stackPos-(10-9)], 'stmts' => $self->semStack[$stackPos-(10-10)], 'attrGroups' => $self->semStack[$stackPos-(10-1)]], $self->getAttributes($self->tokenStartStack[$stackPos-(10-1)], $self->tokenEndStack[$stackPos]));
            },
            525 => static function ($self, $stackPos) {
                 $self->semValue = array(new Stmt\Class_(null, ['type' => $self->semStack[$stackPos-(8-2)], 'extends' => $self->semStack[$stackPos-(8-4)], 'implements' => $self->semStack[$stackPos-(8-5)], 'stmts' => $self->semStack[$stackPos-(8-7)], 'attrGroups' => $self->semStack[$stackPos-(8-1)]], $self->getAttributes($self->tokenStartStack[$stackPos-(8-1)], $self->tokenEndStack[$stackPos])), $self->semStack[$stackPos-(8-3)]);
            $self->checkClass($self->semValue[0], -1);
            },
            526 => static function ($self, $stackPos) {
                 $self->semValue = new Expr\New_($self->semStack[$stackPos-(4-2)], $self->semStack[$stackPos-(4-4)], ['generics' => $self->semStack[$stackPos-(4-3)]], $self->getAttributes($self->tokenStartStack[$stackPos-(4-1)], $self->tokenEndStack[$stackPos]));
            },
            527 => static function ($self, $stackPos) {
                 list($class, $ctorArgs) = $self->semStack[$stackPos-(2-2)]; $self->semValue = new Expr\New_($class, $ctorArgs, $self->getAttributes($self->tokenStartStack[$stackPos-(2-1)], $self->tokenEndStack[$stackPos]));
            },
            528 => static function ($self, $stackPos) {
                 $self->semValue = new Expr\New_($self->semStack[$stackPos-(2-2)], [], $self->getAttributes($self->tokenStartStack[$stackPos-(2-1)], $self->tokenEndStack[$stackPos]));
            },
            529 => null,
            530 => null,
            531 => static function ($self, $stackPos) {
                 $self->semValue = array();
            },
            532 => static function ($self, $stackPos) {
                 $self->semValue = $self->semStack[$stackPos-(4-3)];
            },
            533 => null,
            534 => static function ($self, $stackPos) {
                 $self->semValue = array($self->semStack[$stackPos-(1-1)]);
            },
            535 => static function ($self, $stackPos) {
                 $self->semStack[$stackPos-(3-1)][] = $self->semStack[$stackPos-(3-3)]; $self->semValue = $self->semStack[$stackPos-(3-1)];
            },
            536 => static function ($self, $stackPos) {
                 $self->semValue = new Node\ClosureUse($self->semStack[$stackPos-(2-2)], $self->semStack[$stackPos-(2-1)], $self->getAttributes($self->tokenStartStack[$stackPos-(2-1)], $self->tokenEndStack[$stackPos]));
            },
            537 => static function ($self, $stackPos) {
                 $self->semValue = new Name($self->semStack[$stackPos-(1-1)], $self->getAttributes($self->tokenStartStack[$stackPos-(1-1)], $self->tokenEndStack[$stackPos]));
            },
            538 => static function ($self, $stackPos) {
                 $self->semValue = new Expr\FuncCall($self->semStack[$stackPos-(2-1)], $self->semStack[$stackPos-(2-2)], $self->getAttributes($self->tokenStartStack[$stackPos-(2-1)], $self->tokenEndStack[$stackPos]));
            },
            539 => static function ($self, $stackPos) {
                 $self->semValue = new Expr\FuncCall($self->semStack[$stackPos-(2-1)], $self->semStack[$stackPos-(2-2)], $self->getAttributes($self->tokenStartStack[$stackPos-(2-1)], $self->tokenEndStack[$stackPos]));
            },
            540 => static function ($self, $stackPos) {
                 $self->semValue = new Expr\FuncCall($self->semStack[$stackPos-(2-1)], $self->semStack[$stackPos-(2-2)], $self->getAttributes($self->tokenStartStack[$stackPos-(2-1)], $self->tokenEndStack[$stackPos]));
            },
            541 => static function ($self, $stackPos) {
                 $self->semValue = new Expr\StaticCall($self->semStack[$stackPos-(4-1)], $self->semStack[$stackPos-(4-3)], $self->semStack[$stackPos-(4-4)], $self->getAttributes($self->tokenStartStack[$stackPos-(4-1)], $self->tokenEndStack[$stackPos]));
            },
            542 => static function ($self, $stackPos) {
                 $self->semValue = new Name($self->semStack[$stackPos-(1-1)], $self->getAttributes($self->tokenStartStack[$stackPos-(1-1)], $self->tokenEndStack[$stackPos]));
            },
            543 => static function ($self, $stackPos) {
                 $self->semValue = $self->semStack[$stackPos-(2-1)]; $self->semValue->setAttribute('generics', $self->semStack[$stackPos-(2-2)]);
            },
            544 => static function ($self, $stackPos) {
                 $self->semValue = new Name($self->semStack[$stackPos-(1-1)], $self->getAttributes($self->tokenStartStack[$stackPos-(1-1)], $self->tokenEndStack[$stackPos]));
            },
            545 => static function ($self, $stackPos) {
                 $self->semValue = new Name($self->semStack[$stackPos-(1-1)], $self->getAttributes($self->tokenStartStack[$stackPos-(1-1)], $self->tokenEndStack[$stackPos]));
            },
            546 => static function ($self, $stackPos) {
                 $self->semValue = new Name\FullyQualified(substr($self->semStack[$stackPos-(1-1)], 1), $self->getAttributes($self->tokenStartStack[$stackPos-(1-1)], $self->tokenEndStack[$stackPos]));
            },
            547 => static function ($self, $stackPos) {
                 $self->semValue = new Name\Relative(substr($self->semStack[$stackPos-(1-1)], 10), $self->getAttributes($self->tokenStartStack[$stackPos-(1-1)], $self->tokenEndStack[$stackPos]));
            },
            548 => null,
            549 => null,
            550 => static function ($self, $stackPos) {
                 $self->semValue = $self->semStack[$stackPos-(3-2)];
            },
            551 => static function ($self, $stackPos) {
                 $self->semValue = new Expr\Error($self->getAttributes($self->tokenStartStack[$stackPos-(1-1)], $self->tokenEndStack[$stackPos])); $self->errorState = 2;
            },
            552 => null,
            553 => null,
            554 => static function ($self, $stackPos) {
                 $self->semValue = array();
            },
            555 => static function ($self, $stackPos) {
                 $self->semValue = array($self->semStack[$stackPos-(1-1)]); foreach ($self->semValue as $s) { if ($s instanceof Node\InterpolatedStringPart) { $s->value = Node\Scalar\String_::parseEscapeSequences($s->value, '`', $self->phpVersion->supportsUnicodeEscapes()); } };
            },
            556 => static function ($self, $stackPos) {
                 foreach ($self->semStack[$stackPos-(1-1)] as $s) { if ($s instanceof Node\InterpolatedStringPart) { $s->value = Node\Scalar\String_::parseEscapeSequences($s->value, '`', $self->phpVersion->supportsUnicodeEscapes()); } }; $self->semValue = $self->semStack[$stackPos-(1-1)];
            },
            557 => static function ($self, $stackPos) {
                 $self->semValue = array();
            },
            558 => null,
            559 => static function ($self, $stackPos) {
                 $self->semValue = new Expr\ConstFetch($self->semStack[$stackPos-(1-1)], $self->getAttributes($self->tokenStartStack[$stackPos-(1-1)], $self->tokenEndStack[$stackPos]));
            },
            560 => static function ($self, $stackPos) {
                 $self->semValue = new Scalar\MagicConst\Line($self->getAttributes($self->tokenStartStack[$stackPos-(1-1)], $self->tokenEndStack[$stackPos]));
            },
            561 => static function ($self, $stackPos) {
                 $self->semValue = new Scalar\MagicConst\File($self->getAttributes($self->tokenStartStack[$stackPos-(1-1)], $self->tokenEndStack[$stackPos]));
            },
            562 => static function ($self, $stackPos) {
                 $self->semValue = new Scalar\MagicConst\Dir($self->getAttributes($self->tokenStartStack[$stackPos-(1-1)], $self->tokenEndStack[$stackPos]));
            },
            563 => static function ($self, $stackPos) {
                 $self->semValue = new Scalar\MagicConst\Class_($self->getAttributes($self->tokenStartStack[$stackPos-(1-1)], $self->tokenEndStack[$stackPos]));
            },
            564 => static function ($self, $stackPos) {
                 $self->semValue = new Scalar\MagicConst\Trait_($self->getAttributes($self->tokenStartStack[$stackPos-(1-1)], $self->tokenEndStack[$stackPos]));
            },
            565 => static function ($self, $stackPos) {
                 $self->semValue = new Scalar\MagicConst\Method($self->getAttributes($self->tokenStartStack[$stackPos-(1-1)], $self->tokenEndStack[$stackPos]));
            },
            566 => static function ($self, $stackPos) {
                 $self->semValue = new Scalar\MagicConst\Function_($self->getAttributes($self->tokenStartStack[$stackPos-(1-1)], $self->tokenEndStack[$stackPos]));
            },
            567 => static function ($self, $stackPos) {
                 $self->semValue = new Scalar\MagicConst\Namespace_($self->getAttributes($self->tokenStartStack[$stackPos-(1-1)], $self->tokenEndStack[$stackPos]));
            },
            568 => static function ($self, $stackPos) {
                 $self->semValue = new Scalar\MagicConst\Property($self->getAttributes($self->tokenStartStack[$stackPos-(1-1)], $self->tokenEndStack[$stackPos]));
            },
            569 => static function ($self, $stackPos) {
                 $self->semValue = new Expr\ClassConstFetch($self->semStack[$stackPos-(3-1)], $self->semStack[$stackPos-(3-3)], $self->getAttributes($self->tokenStartStack[$stackPos-(3-1)], $self->tokenEndStack[$stackPos]));
            },
            570 => static function ($self, $stackPos) {
                 $self->semValue = new Expr\ClassConstFetch($self->semStack[$stackPos-(5-1)], $self->semStack[$stackPos-(5-4)], $self->getAttributes($self->tokenStartStack[$stackPos-(5-1)], $self->tokenEndStack[$stackPos]));
            },
            571 => static function ($self, $stackPos) {
                 $self->semValue = new Expr\ClassConstFetch($self->semStack[$stackPos-(3-1)], new Expr\Error($self->getAttributes($self->tokenStartStack[$stackPos-(3-3)],  $self->tokenEndStack[$stackPos-(3-3)])), $self->getAttributes($self->tokenStartStack[$stackPos-(3-1)], $self->tokenEndStack[$stackPos])); $self->errorState = 2;
            },
            572 => static function ($self, $stackPos) {
                 $attrs = $self->getAttributes($self->tokenStartStack[$stackPos-(3-1)], $self->tokenEndStack[$stackPos]); $attrs['kind'] = Expr\Array_::KIND_SHORT;
            $self->semValue = new Expr\Array_($self->semStack[$stackPos-(3-2)], $attrs);
            },
            573 => static function ($self, $stackPos) {
                 $attrs = $self->getAttributes($self->tokenStartStack[$stackPos-(4-1)], $self->tokenEndStack[$stackPos]); $attrs['kind'] = Expr\Array_::KIND_LONG;
            $self->semValue = new Expr\Array_($self->semStack[$stackPos-(4-3)], $attrs);
            $self->createdArrays->offsetSet($self->semValue);
            },
            574 => static function ($self, $stackPos) {
                 $self->semValue = $self->semStack[$stackPos-(1-1)]; $self->createdArrays->offsetSet($self->semValue);
            },
            575 => static function ($self, $stackPos) {
                 $self->semValue = Scalar\String_::fromString($self->semStack[$stackPos-(1-1)], $self->getAttributes($self->tokenStartStack[$stackPos-(1-1)], $self->tokenEndStack[$stackPos]), $self->phpVersion->supportsUnicodeEscapes());
            },
            576 => static function ($self, $stackPos) {
                 $attrs = $self->getAttributes($self->tokenStartStack[$stackPos-(3-1)], $self->tokenEndStack[$stackPos]); $attrs['kind'] = Scalar\String_::KIND_DOUBLE_QUOTED;
            foreach ($self->semStack[$stackPos-(3-2)] as $s) { if ($s instanceof Node\InterpolatedStringPart) { $s->value = Node\Scalar\String_::parseEscapeSequences($s->value, '"', $self->phpVersion->supportsUnicodeEscapes()); } }; $self->semValue = new Scalar\InterpolatedString($self->semStack[$stackPos-(3-2)], $attrs);
            },
            577 => static function ($self, $stackPos) {
                 $self->semValue = $self->parseLNumber($self->semStack[$stackPos-(1-1)], $self->getAttributes($self->tokenStartStack[$stackPos-(1-1)], $self->tokenEndStack[$stackPos]), $self->phpVersion->allowsInvalidOctals());
            },
            578 => static function ($self, $stackPos) {
                 $self->semValue = Scalar\Float_::fromString($self->semStack[$stackPos-(1-1)], $self->getAttributes($self->tokenStartStack[$stackPos-(1-1)], $self->tokenEndStack[$stackPos]));
            },
            579 => null,
            580 => null,
            581 => null,
            582 => static function ($self, $stackPos) {
                 $self->semValue = $self->parseDocString($self->semStack[$stackPos-(3-1)], $self->semStack[$stackPos-(3-2)], $self->semStack[$stackPos-(3-3)], $self->getAttributes($self->tokenStartStack[$stackPos-(3-1)], $self->tokenEndStack[$stackPos]), $self->getAttributes($self->tokenStartStack[$stackPos-(3-3)],  $self->tokenEndStack[$stackPos-(3-3)]), true);
            },
            583 => static function ($self, $stackPos) {
                 $self->semValue = $self->parseDocString($self->semStack[$stackPos-(2-1)], '', $self->semStack[$stackPos-(2-2)], $self->getAttributes($self->tokenStartStack[$stackPos-(2-1)], $self->tokenEndStack[$stackPos]), $self->getAttributes($self->tokenStartStack[$stackPos-(2-2)],  $self->tokenEndStack[$stackPos-(2-2)]), true);
            },
            584 => static function ($self, $stackPos) {
                 $self->semValue = $self->parseDocString($self->semStack[$stackPos-(3-1)], $self->semStack[$stackPos-(3-2)], $self->semStack[$stackPos-(3-3)], $self->getAttributes($self->tokenStartStack[$stackPos-(3-1)], $self->tokenEndStack[$stackPos]), $self->getAttributes($self->tokenStartStack[$stackPos-(3-3)],  $self->tokenEndStack[$stackPos-(3-3)]), true);
            },
            585 => static function ($self, $stackPos) {
                 $self->semValue = null;
            },
            586 => null,
            587 => null,
            588 => static function ($self, $stackPos) {
                 $self->semValue = $self->semStack[$stackPos-(3-2)];
            },
            589 => null,
            590 => null,
            591 => null,
            592 => null,
            593 => null,
            594 => null,
            595 => static function ($self, $stackPos) {
                 $self->semValue = $self->semStack[$stackPos-(3-2)];
            },
            596 => null,
            597 => null,
            598 => null,
            599 => static function ($self, $stackPos) {
                 $self->semValue = new Expr\ArrayDimFetch($self->semStack[$stackPos-(4-1)], $self->semStack[$stackPos-(4-3)], $self->getAttributes($self->tokenStartStack[$stackPos-(4-1)], $self->tokenEndStack[$stackPos]));
            },
            600 => static function ($self, $stackPos) {
                 $self->semValue = new Expr\ArrayDimFetch($self->semStack[$stackPos-(4-1)], $self->semStack[$stackPos-(4-3)], $self->getAttributes($self->tokenStartStack[$stackPos-(4-1)], $self->tokenEndStack[$stackPos]));
            },
            601 => null,
            602 => static function ($self, $stackPos) {
                 $self->semValue = new Expr\MethodCall($self->semStack[$stackPos-(4-1)], $self->semStack[$stackPos-(4-3)], $self->semStack[$stackPos-(4-4)], $self->getAttributes($self->tokenStartStack[$stackPos-(4-1)], $self->tokenEndStack[$stackPos]));
            },
            603 => static function ($self, $stackPos) {
                 $self->semValue = new Expr\NullsafeMethodCall($self->semStack[$stackPos-(4-1)], $self->semStack[$stackPos-(4-3)], $self->semStack[$stackPos-(4-4)], $self->getAttributes($self->tokenStartStack[$stackPos-(4-1)], $self->tokenEndStack[$stackPos]));
            },
            604 => static function ($self, $stackPos) {
                 $self->semValue = null;
            },
            605 => null,
            606 => null,
            607 => null,
            608 => static function ($self, $stackPos) {
                 $self->semValue = new Expr\PropertyFetch($self->semStack[$stackPos-(3-1)], $self->semStack[$stackPos-(3-3)], $self->getAttributes($self->tokenStartStack[$stackPos-(3-1)], $self->tokenEndStack[$stackPos]));
            },
            609 => static function ($self, $stackPos) {
                 $self->semValue = new Expr\NullsafePropertyFetch($self->semStack[$stackPos-(3-1)], $self->semStack[$stackPos-(3-3)], $self->getAttributes($self->tokenStartStack[$stackPos-(3-1)], $self->tokenEndStack[$stackPos]));
            },
            610 => null,
            611 => static function ($self, $stackPos) {
                 $self->semValue = new Expr\Variable($self->semStack[$stackPos-(4-3)], $self->getAttributes($self->tokenStartStack[$stackPos-(4-1)], $self->tokenEndStack[$stackPos]));
            },
            612 => static function ($self, $stackPos) {
                 $self->semValue = new Expr\Variable($self->semStack[$stackPos-(2-2)], $self->getAttributes($self->tokenStartStack[$stackPos-(2-1)], $self->tokenEndStack[$stackPos]));
            },
            613 => static function ($self, $stackPos) {
                 $self->semValue = new Expr\Variable(new Expr\Error($self->getAttributes($self->tokenStartStack[$stackPos-(2-1)], $self->tokenEndStack[$stackPos])), $self->getAttributes($self->tokenStartStack[$stackPos-(2-1)], $self->tokenEndStack[$stackPos])); $self->errorState = 2;
            },
            614 => static function ($self, $stackPos) {
                 $var = $self->semStack[$stackPos-(1-1)]->name; $self->semValue = \is_string($var) ? new Node\VarLikeIdentifier($var, $self->getAttributes($self->tokenStartStack[$stackPos-(1-1)], $self->tokenEndStack[$stackPos])) : $var;
            },
            615 => static function ($self, $stackPos) {
                 $self->semValue = new Expr\StaticPropertyFetch($self->semStack[$stackPos-(3-1)], $self->semStack[$stackPos-(3-3)], $self->getAttributes($self->tokenStartStack[$stackPos-(3-1)], $self->tokenEndStack[$stackPos]));
            },
            616 => null,
            617 => static function ($self, $stackPos) {
                 $self->semValue = new Expr\ArrayDimFetch($self->semStack[$stackPos-(4-1)], $self->semStack[$stackPos-(4-3)], $self->getAttributes($self->tokenStartStack[$stackPos-(4-1)], $self->tokenEndStack[$stackPos]));
            },
            618 => static function ($self, $stackPos) {
                 $self->semValue = new Expr\ArrayDimFetch($self->semStack[$stackPos-(4-1)], $self->semStack[$stackPos-(4-3)], $self->getAttributes($self->tokenStartStack[$stackPos-(4-1)], $self->tokenEndStack[$stackPos]));
            },
            619 => static function ($self, $stackPos) {
                 $self->semValue = new Expr\PropertyFetch($self->semStack[$stackPos-(3-1)], $self->semStack[$stackPos-(3-3)], $self->getAttributes($self->tokenStartStack[$stackPos-(3-1)], $self->tokenEndStack[$stackPos]));
            },
            620 => static function ($self, $stackPos) {
                 $self->semValue = new Expr\NullsafePropertyFetch($self->semStack[$stackPos-(3-1)], $self->semStack[$stackPos-(3-3)], $self->getAttributes($self->tokenStartStack[$stackPos-(3-1)], $self->tokenEndStack[$stackPos]));
            },
            621 => static function ($self, $stackPos) {
                 $self->semValue = new Expr\StaticPropertyFetch($self->semStack[$stackPos-(3-1)], $self->semStack[$stackPos-(3-3)], $self->getAttributes($self->tokenStartStack[$stackPos-(3-1)], $self->tokenEndStack[$stackPos]));
            },
            622 => static function ($self, $stackPos) {
                 $self->semValue = new Expr\StaticPropertyFetch($self->semStack[$stackPos-(3-1)], $self->semStack[$stackPos-(3-3)], $self->getAttributes($self->tokenStartStack[$stackPos-(3-1)], $self->tokenEndStack[$stackPos]));
            },
            623 => null,
            624 => static function ($self, $stackPos) {
                 $self->semValue = $self->semStack[$stackPos-(3-2)];
            },
            625 => null,
            626 => null,
            627 => static function ($self, $stackPos) {
                 $self->semValue = $self->semStack[$stackPos-(3-2)];
            },
            628 => null,
            629 => static function ($self, $stackPos) {
                 $self->semValue = new Expr\Error($self->getAttributes($self->tokenStartStack[$stackPos-(1-1)], $self->tokenEndStack[$stackPos])); $self->errorState = 2;
            },
            630 => static function ($self, $stackPos) {
                 $self->semValue = new Expr\List_($self->semStack[$stackPos-(4-3)], $self->getAttributes($self->tokenStartStack[$stackPos-(4-1)], $self->tokenEndStack[$stackPos])); $self->semValue->setAttribute('kind', Expr\List_::KIND_LIST);
            $self->postprocessList($self->semValue);
            },
            631 => static function ($self, $stackPos) {
                 $self->semValue = $self->semStack[$stackPos-(1-1)]; $end = count($self->semValue)-1; if ($self->semValue[$end]->value instanceof Expr\Error) array_pop($self->semValue);
            },
            632 => null,
            633 => static function ($self, $stackPos) {
                 /* do nothing -- prevent default action of $$=$self->semStack[$1]. See $551. */
            },
            634 => static function ($self, $stackPos) {
                 $self->semStack[$stackPos-(3-1)][] = $self->semStack[$stackPos-(3-3)]; $self->semValue = $self->semStack[$stackPos-(3-1)];
            },
            635 => static function ($self, $stackPos) {
                 $self->semValue = array($self->semStack[$stackPos-(1-1)]);
            },
            636 => static function ($self, $stackPos) {
                 $self->semValue = new Node\ArrayItem($self->semStack[$stackPos-(1-1)], null, false, $self->getAttributes($self->tokenStartStack[$stackPos-(1-1)], $self->tokenEndStack[$stackPos]));
            },
            637 => static function ($self, $stackPos) {
                 $self->semValue = new Node\ArrayItem($self->semStack[$stackPos-(2-2)], null, true, $self->getAttributes($self->tokenStartStack[$stackPos-(2-1)], $self->tokenEndStack[$stackPos]));
            },
            638 => static function ($self, $stackPos) {
                 $self->semValue = new Node\ArrayItem($self->semStack[$stackPos-(1-1)], null, false, $self->getAttributes($self->tokenStartStack[$stackPos-(1-1)], $self->tokenEndStack[$stackPos]));
            },
            639 => static function ($self, $stackPos) {
                 $self->semValue = new Node\ArrayItem($self->semStack[$stackPos-(3-3)], $self->semStack[$stackPos-(3-1)], false, $self->getAttributes($self->tokenStartStack[$stackPos-(3-1)], $self->tokenEndStack[$stackPos]));
            },
            640 => static function ($self, $stackPos) {
                 $self->semValue = new Node\ArrayItem($self->semStack[$stackPos-(4-4)], $self->semStack[$stackPos-(4-1)], true, $self->getAttributes($self->tokenStartStack[$stackPos-(4-1)], $self->tokenEndStack[$stackPos]));
            },
            641 => static function ($self, $stackPos) {
                 $self->semValue = new Node\ArrayItem($self->semStack[$stackPos-(3-3)], $self->semStack[$stackPos-(3-1)], false, $self->getAttributes($self->tokenStartStack[$stackPos-(3-1)], $self->tokenEndStack[$stackPos]));
            },
            642 => static function ($self, $stackPos) {
                 $self->semValue = new Node\ArrayItem($self->semStack[$stackPos-(2-2)], null, false, $self->getAttributes($self->tokenStartStack[$stackPos-(2-1)], $self->tokenEndStack[$stackPos]), true);
            },
            643 => static function ($self, $stackPos) {
                 /* Create an Error node now to remember the position. We'll later either report an error,
             or convert this into a null element, depending on whether this is a creation or destructuring context. */
          $attrs = $self->createEmptyElemAttributes($self->tokenPos);
          $self->semValue = new Node\ArrayItem(new Expr\Error($attrs), null, false, $attrs);
            },
            644 => static function ($self, $stackPos) {
                 $self->semStack[$stackPos-(2-1)][] = $self->semStack[$stackPos-(2-2)]; $self->semValue = $self->semStack[$stackPos-(2-1)];
            },
            645 => static function ($self, $stackPos) {
                 $self->semStack[$stackPos-(2-1)][] = $self->semStack[$stackPos-(2-2)]; $self->semValue = $self->semStack[$stackPos-(2-1)];
            },
            646 => static function ($self, $stackPos) {
                 $self->semValue = array($self->semStack[$stackPos-(1-1)]);
            },
            647 => static function ($self, $stackPos) {
                 $self->semValue = array($self->semStack[$stackPos-(2-1)], $self->semStack[$stackPos-(2-2)]);
            },
            648 => static function ($self, $stackPos) {
                 $attrs = $self->getAttributes($self->tokenStartStack[$stackPos-(1-1)], $self->tokenEndStack[$stackPos]); $attrs['rawValue'] = $self->semStack[$stackPos-(1-1)]; $self->semValue = new Node\InterpolatedStringPart($self->semStack[$stackPos-(1-1)], $attrs);
            },
            649 => static function ($self, $stackPos) {
                 $self->semValue = new Expr\Variable($self->semStack[$stackPos-(1-1)], $self->getAttributes($self->tokenStartStack[$stackPos-(1-1)], $self->tokenEndStack[$stackPos]));
            },
            650 => null,
            651 => static function ($self, $stackPos) {
                 $self->semValue = new Expr\ArrayDimFetch($self->semStack[$stackPos-(4-1)], $self->semStack[$stackPos-(4-3)], $self->getAttributes($self->tokenStartStack[$stackPos-(4-1)], $self->tokenEndStack[$stackPos]));
            },
            652 => static function ($self, $stackPos) {
                 $self->semValue = new Expr\PropertyFetch($self->semStack[$stackPos-(3-1)], $self->semStack[$stackPos-(3-3)], $self->getAttributes($self->tokenStartStack[$stackPos-(3-1)], $self->tokenEndStack[$stackPos]));
            },
            653 => static function ($self, $stackPos) {
                 $self->semValue = new Expr\NullsafePropertyFetch($self->semStack[$stackPos-(3-1)], $self->semStack[$stackPos-(3-3)], $self->getAttributes($self->tokenStartStack[$stackPos-(3-1)], $self->tokenEndStack[$stackPos]));
            },
            654 => static function ($self, $stackPos) {
                 $self->semValue = new Expr\Variable($self->semStack[$stackPos-(3-2)], $self->getAttributes($self->tokenStartStack[$stackPos-(3-1)], $self->tokenEndStack[$stackPos]));
            },
            655 => static function ($self, $stackPos) {
                 $self->semValue = new Expr\Variable($self->semStack[$stackPos-(3-2)], $self->getAttributes($self->tokenStartStack[$stackPos-(3-1)], $self->tokenEndStack[$stackPos]));
            },
            656 => static function ($self, $stackPos) {
                 $self->semValue = new Expr\ArrayDimFetch($self->semStack[$stackPos-(6-2)], $self->semStack[$stackPos-(6-4)], $self->getAttributes($self->tokenStartStack[$stackPos-(6-1)], $self->tokenEndStack[$stackPos]));
            },
            657 => static function ($self, $stackPos) {
                 $self->semValue = $self->semStack[$stackPos-(3-2)];
            },
            658 => static function ($self, $stackPos) {
                 $self->semValue = new Scalar\String_($self->semStack[$stackPos-(1-1)], $self->getAttributes($self->tokenStartStack[$stackPos-(1-1)], $self->tokenEndStack[$stackPos]));
            },
            659 => static function ($self, $stackPos) {
                 $self->semValue = $self->parseNumString($self->semStack[$stackPos-(1-1)], $self->getAttributes($self->tokenStartStack[$stackPos-(1-1)], $self->tokenEndStack[$stackPos]));
            },
            660 => static function ($self, $stackPos) {
                 $self->semValue = $self->parseNumString('-' . $self->semStack[$stackPos-(2-2)], $self->getAttributes($self->tokenStartStack[$stackPos-(2-1)], $self->tokenEndStack[$stackPos]));
            },
            661 => null,
        ];
    }
}
